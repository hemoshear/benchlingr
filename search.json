[{"path":"https://benchling-r.info/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 benchlingr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"benchlingr","text":"Benchling R&D Cloud laboratory information management system developer platform consisting read-Postgres database, application programming interface (API), “Events” system built top AWS EventBridge service, well Python software development kit (SDK). benchlingr unofficial R package allows one easily connect tables Benchling data warehouse, download file attachments, extract unstructured tables notebook entries, upload assay results platform.","code":""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"benchlingr","text":"Install benchlingr package GitHub using remotes package. benchlingr package also requires Python. may consider using Anaconda distribution, reticulate package use miniconda default.","code":"remotes::install_github(\"hemoshear/benchlingr\")"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"benchling-developer-platform-components","dir":"Articles","previous_headings":"","what":"Benchling Developer Platform Components","title":"benchlingr","text":"Benchling Developer Platform consists several components. first component RESTFUL API service, can used read write data Benchling platform. Benchling also supports Python software development kit (SDK) accessing API via Python. need write data Benchling, use API, can accessed Python SDK making calls API directly. second component platform read-, Postgres database. need read data Benchling, can choose use API Postgres database. Since slight delay time data submitted Benchling front-end data synced Postgres database, recommend using API delay tolerated. experience, database synced within minute cases, however, large number items uploaded Benchling platform, Benchling claims database sync may take 24 hours. content notebook entries attached files must retrieved API available Postgres database. can tolerate small delay data availability don’t need download file read notebook entry, option using Postgres database API. choice component use largely determined software dependencies want include project, well skill sets preferences engineers working Benchling installation. often try utilize Postgres database reading data, writing SQL convenient way us extract data platform. last component platform connector AWS EventBridge, platform event-based applications. Benchling supports limited number events. Generally speaking, component developer platform enables one perform computation AWS things happen Benchling platform, may may involve components Benchling developer platform.","code":""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"benchlingr","text":"benchlingr package primarily utilizes RESTFUL API service Postgres database components Benchling developer platform. order use components Benchling platform, one must acquire API keys database credentials Benchling interface. section focus make credentials available benchlingr package.","code":""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"api","dir":"Articles","previous_headings":"Configuration","what":"API","title":"benchlingr","text":"order access Benchling API service one’s Benchling tenant, one must obtain API key Benchling interface. Follow instructions official documentation obtain API key. obtaining API key, recommended define variable .Renviron called BENCHLING_API_KEY make key accessible benchlingr package default function arguments.","code":"# ~/.Renviron  # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"python-sdk","dir":"Articles","previous_headings":"Configuration","what":"Python SDK","title":"benchlingr","text":"benchlingr R package uses official Benchling Python SDK access Benchling API service. Python dependencies installed automatically miniconda environment. One can also create new conda virtualenv environments config_sdk_env helper function, simply creates environment installs benchling-sdk package . create interface Benchling API, use connect_sdk function set BENCHLING_API_KEY environment variable described Python SDK configuration section. connect_sdk function returns facade object Benchling Python SDK facilitates interaction API. attributes facade object services Benchling API documentation. service multiple methods available.","code":"config_sdk_env() client <- connect_sdk(   tenant=\"https://hemoshear-dev.benchling.com\",   api_key=Sys.getenv(\"BENCHLING_DEV_API_KEY\")) head(names(client)) #> [1] \"aa_sequences\"  \"api\"           \"apps\"          \"assay_results\" #> [5] \"assay_runs\"    \"blobs\" names(client$entries) #>  [1] \"archive_entries\"          \"bulk_get_entries\"         #>  [3] \"client\"                   \"create_entry\"             #>  [5] \"get_entry_by_id\"          \"get_entry_template_by_id\" #>  [7] \"get_external_file\"        \"list_entries\"             #>  [9] \"list_entry_templates\"     \"retry_strategy\"           #> [11] \"unarchive_entries\"        \"update_entry\""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"data-warehouse","dir":"Articles","previous_headings":"Configuration","what":"Data warehouse","title":"benchlingr","text":"Follow instructions official documentation obtain username password data warehouse Benchling tenant. obtaining username password, recommended one define variable .Renviron called BENCHLING_WAREHOUSE_KEY BENCHLING_WAREHOUSE_PASSWORD make credentials available benchlingr default function arguments.","code":"# ~/.Renviron # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx  # Benchling warehouse credentials BENCHLING_WAREHOUSE_USERNAME=yyyyyyyyyyy BENCHLING_WAREHOUSE_PASSWORD=xxxxxxxxxxx"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"fundamentals-of-the-benchling-data-warehouse","dir":"Articles","previous_headings":"","what":"Fundamentals of the Benchling Data Warehouse","title":"benchlingr","text":"Benchling data warehouse read-, Postgres database can used easily extract data pertaining items inventory, entities, results, noteboook entries using SQL queries. moving , recommend user reads official Benchling documentation data warehouse. rest section assume user basic understanding Benchling’s data warehouse, discuss practical considerations working database, including use benchlingr tools streamline interactions database. connect data warehouse tenant benchlingr package, use connect_warehouse function. default, function looks two environment variables .Renviron: BENCHLING_WAREHOUSE_USERNAME BENCHLING_WAREHOUSE_PASSWORD. function working , please see instructions configuration official documentation. able connect database using instructions official tutorial, connect_warehouse function work properly, assuming aforementioned environment variables set. connect_warehouse function return Postgres SQL database connection object (PqConnection), can used make queries database using DBI package R. verify connected database Benchling tenant, one can use dbIsValid display information connection . DBI::dbDisconnect function closes warehouse connection.","code":"conn <- connect_warehouse(tenant = \"hemoshear-dev\",                           username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),                           password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) class(conn) #> [1] \"PqConnection\" #> attr(,\"package\") #> [1] \"RPostgres\" DBI::dbIsValid(conn) #> [1] TRUE DBI::dbDisconnect(conn)"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"raw-tables-and-postgres-views","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"“Raw” tables and Postgres views","title":"benchlingr","text":"One can use DBI::dbListTables function see tables database. ’ll notice every “table” database actually comprised two tables: unedited version data, referred “raw” table, cleaned Postgres view data. example, analyte table Postgres view custom entity schema defined, analyte$raw table unedited table. general, Postgres views convenient work , since raw tables contain many Benchling identifiers intended internal use. one needs extract assay results submitted notebook entries approved, one need use “raw” tables , since Postgres views contain assay results unreviewed notebooks. Refer official Benchling documentation information differences raw tables Postgres views.","code":"conn <- connect_warehouse(   tenant = \"hemoshear-dev\",   username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),   password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) DBI::dbListTables(conn)[1:6] #> [1] \"analyte\"                 \"analyte$raw\"             #> [3] \"assay_result_schema\"     \"assay_result_schema$raw\" #> [5] \"author\"                  \"author$raw\""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"retrieving-data-from-the-warehouse","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Retrieving data from the warehouse","title":"benchlingr","text":"retrieve data table data warehouse, one can use DBI::dbGetQuery function. example, code one use retrieve notebook entries data warehouse. Take moment look results query, well descriptions columns official Benchling documentation.","code":"DBI::dbGetQuery(conn, \"SELECT * FROM entry\") %>%   tail() #>              id    source_id archived$ archive_purpose$   creator_id #> 5  etr_IWLMFYhR src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 6  etr_aTa6eDWA src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 7  etr_5daiA17O src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 8  etr_JYUlMiIs src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 9  etr_lnZDpRVI src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 10 etr_MWQ7M7Pz src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #>             created_at         modified_at #> 5  2023-02-10 17:26:01 2023-02-10 17:26:37 #> 6  2023-02-28 13:08:52 2023-02-28 13:14:12 #> 7  2023-03-06 13:24:54 2023-03-06 13:30:35 #> 8  2022-09-20 14:03:59 2022-09-20 18:26:58 #> 9  2022-09-22 14:55:52 2022-09-22 14:57:04 #> 10 2022-09-20 13:01:10 2022-09-23 14:47:27 #>                                     name  display_id    folder_id workflow_id #> 5  read_entry_tables_table_name_argument EXP23000002 lib_F5H5Syfw        <NA> #> 6          read_entry_tables_test_case_2 EXP23000003 lib_F5H5Syfw        <NA> #> 7                      get_entry_results EXP23000004 lib_F5H5Syfw        <NA> #> 8                         download_blobs EXP22000004 lib_F5H5Syfw        <NA> #> 9                       get_entity_table EXP22000005 lib_F5H5Syfw        <NA> #> 10             expand_multiselect_column EXP22000003 lib_F5H5Syfw        <NA> #>    schema_id entry_template_id review_status review_requested_at #> 5       <NA>              <NA>          <NA>                <NA> #> 6       <NA>              <NA>          <NA>                <NA> #> 7       <NA>              <NA>          <NA>                <NA> #> 8       <NA>              <NA>          <NA>                <NA> #> 9       <NA>              <NA>          <NA>                <NA> #> 10      <NA>              <NA>          <NA>                <NA> #>    review_status_changed_at review_process review_process_type #> 5                      <NA>           <NA>                <NA> #> 6                      <NA>           <NA>                <NA> #> 7                      <NA>           <NA>                <NA> #> 8                      <NA>           <NA>                <NA> #> 9                      <NA>           <NA>                <NA> #> 10                     <NA>           <NA>                <NA> #>                                                                                                                                                             url #> 5  https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_IWLMFYhR-read_entry_tables_table_name_argument/edit #> 6          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_aTa6eDWA-read_entry_tables_test_case_2/edit #> 7                      https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_5daiA17O-get_entry_results/edit #> 8                         https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_JYUlMiIs-download_blobs/edit #> 9                       https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_lnZDpRVI-get_entity_table/edit #> 10             https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_MWQ7M7Pz-expand_multiselect_column/edit"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"custom-entities","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse > Retrieving data from the warehouse","what":"Custom entities","title":"benchlingr","text":"data warehouse tenant come pre-loaded tables relevant entity schemas common Benchling installations. example, entry schema available every Benchling installation ELN functionality. tables created new schemas defined Benchling. custom entity result schema defined, Benchling creates new set tables database: one Postgres view one raw data. example, defined custom entity schema representing analytes.","code":""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"custom-analyte-entity","dir":"Articles","previous_headings":"","what":"benchlingr","title":"benchlingr","text":"defined “Analyte” custom entity schema, Benchling created table data warehouse called analyte. analyte entities created can retrieved DBI::dbGetQuery. Benchling also created “raw” table custom analyte schema. example analyte entity key fields highlighted: id, name$, registry_name$, schema. 12C-Uric Acid analyte. schema, id, name$ important fields present every entity warehouse table. id identifier Benchling uses reference entities API data warehouse. example, suppose results table one fields entity link. Whenever results retrieved data warehouse, entity link represented foreign key results table, can linked back primary key entity table. identifier custom entity always start bfi_, built-Benchling entities specific prefixes identifiers. example, container built-Benchling entity schema identifiers containers start con_. name human-readable name entity. creator entity schema ability configure ways entity can named. One naming option let entity creator name entity anything want, long unique. naming options involve automatically generating name based fields entity simply incrementing number. registry_name$ secondary identifier entity always generated automatically entity registration. defining entity schema, entity creator gives schema prefix. prefix concatenated incremented number become registry name. entity can configured one naming option makes primary name field registry_name$. schema field system name schema, necessary critical functionality benchlingr. benchlingr provides several functions extracting tables warehouse, requires schema field look schema definitions (schema schema_field tables) tables database. addition schema, id, name$, many columns present every entity table. Read columns Benchling documentation. Finally, warehouse table custom entity contain column every user-defined field entity. “analyte” example, analyte entity can precursor ion m/z product ion m/z, representing floats “decimals” using Benchling terminology.","code":"DBI::dbGetQuery(conn,    \"SELECT schema,id,name$,precursor_ion_mz,product_ion_mz FROM analyte\") %>%   head() #>    schema           id                  name$ precursor_ion_mz product_ion_mz #> 1 analyte bfi_Q13AlXkf          13C-Uric Acid            171.0          126.0 #> 2 analyte bfi_VVamxrKQ 13C-Methylmalonic Acid            121.3           76.4 #> 3 analyte bfi_KsLU5uWV          12C-Uric Acid            166.9          123.9 #> 4 analyte bfi_9fKcrORv 12C-Methylmalonic Acid            117.0           73.1 DBI::dbGetQuery(conn,    \"SELECT id,schema,precursor_ion_mz,product_ion_mz,assay FROM analyte$raw\") %>%   head()"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"results","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Results","title":"benchlingr","text":"Similar entities, every results schema Benchling represented table data warehouse. several differences representations results entities worth mentioning. First, results name field, entities . name one identifiers entity naming options entity set schema-level. Second, results entities id field, unlike entities, id result appear foreign key table. Third, unlike entities, results become available Postgres view notebook entry reviewed. reason, use “raw” tables need retrieve results notebook entries yet reviewed. Finally, results linked particular notebook entries data warehouse, entities . words, warehouse table results schema column notebook entry identifier, entity table column notebook entry identifier. Shown screenshot results table notebook entry schema called “Simple Plate Analyte Mapping”. result schema two fields: “Plate” “Analytes”. “Plate” field integer type serves identifier assay plate, “Analytes” field custom entity type “Analyte” discussed previous section. “Analytes” field can also take multiple values. Example results table notebook two fields: “Plate” “Analytes”. “Plate” field integer type “Analytes” field custom entity type called “Analyte” multiple values enabled. Plate 1 corresponds methylmalonic acid analytes plate 2 corresponds uric acid analytes extract data warehouse, use DBI::dbGetQuery function. case, use identifier notebook entry extract results simple_plate_analyte_mapping schema. ’m looking “raw” table notebook entry table reviewed yet. Many columns “raw” tables used context, _pkey _sync_key, internal identifiers Benchling. important also extract archived$ column see whether results archived, well schema column, since schema column used look schema definition Postgres database.","code":"DBI::dbGetQuery(conn,    \"SELECT * FROM simple_plate_analyte_mapping$raw WHERE entry_id$ = 'etr_MWQ7M7Pz'\") #>                                     id                                _pkey #> 1 48d937f3-4035-494d-b63a-b658c91aadbd ad4344c3-4b58-476f-9fc2-caf043bec69a #> 2 b30e02a0-6084-419d-a552-d6419aa564e0 31a79378-e82e-4a25-837d-65f4619770c9 #>            _sync_key    source_id                       schema #> 1 assay_result_22898 src_ZRvTYOgM simple_plate_analyte_mapping #> 2 assay_result_22897 src_ZRvTYOgM simple_plate_analyte_mapping #>           created_at$  creator_id$    entry_id$ archived$ archive_purpose$ #> 1 2022-09-20 13:08:21 ent_Ec76qX9f etr_MWQ7M7Pz     FALSE             <NA> #> 2 2022-09-20 13:08:21 ent_Ec76qX9f etr_MWQ7M7Pz     FALSE             <NA> #>   custom$ validation_status$ validation_comment$ run_id$ #> 1      {}              VALID                <NA>    <NA> #> 2      {}              VALID                <NA>    <NA> #>                                                                                                                                                                                                   field_validation$ #> 1 {\"file\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"plate\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"analytes\": {\"validation_status\": \"VALID\", \"validation_comment\": null}} #> 2 {\"file\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"plate\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"analytes\": {\"validation_status\": \"VALID\", \"validation_comment\": null}} #>   plate                         analytes file #> 1     2 [\"bfi_KsLU5uWV\", \"bfi_Q13AlXkf\"] <NA> #> 2     1 [\"bfi_9fKcrORv\", \"bfi_VVamxrKQ\"] <NA> df <- DBI::dbGetQuery(conn,    \"SELECT schema,archived$,plate,analytes FROM simple_plate_analyte_mapping$raw    WHERE entry_id$ = 'etr_MWQ7M7Pz'\")"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"multi-select-columns","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Multi-select columns","title":"benchlingr","text":"Fields entities results can configured multiple values can submitted. “multi-select” columns represented JSON objects data warehouse. unpack values columns create new rows columns data frame, use expand_multiselect_column function. unpack value original row copied value multi-select column, use shape=\"long\" argument. unpack value new columns original row, use shape=\"wide\" argument. default, new columns named appending number original column name (\\((1, 2, ..., n)\\), n maximum number elements appear value within multi-select field). using \"wide\" argument, original column pq_jsonb type stored data frame.","code":"expand_multiselect_column(conn, df, column=\"analytes\", shape=\"long\") #>                         schema archived$ plate     analytes #> 1 simple_plate_analyte_mapping     FALSE     2 bfi_KsLU5uWV #> 2 simple_plate_analyte_mapping     FALSE     2 bfi_Q13AlXkf #> 3 simple_plate_analyte_mapping     FALSE     1 bfi_9fKcrORv #> 4 simple_plate_analyte_mapping     FALSE     1 bfi_VVamxrKQ expand_multiselect_column(conn, df, column=\"analytes\", shape=\"wide\") #> New names: #> • `` -> `...1` #> • `` -> `...2` #>                         schema archived$ plate                         analytes #> 1 simple_plate_analyte_mapping     FALSE     2 [\"bfi_KsLU5uWV\", \"bfi_Q13AlXkf\"] #> 2 simple_plate_analyte_mapping     FALSE     1 [\"bfi_9fKcrORv\", \"bfi_VVamxrKQ\"] #>      analytes1    analytes2 #> 1 bfi_KsLU5uWV bfi_Q13AlXkf #> 2 bfi_9fKcrORv bfi_VVamxrKQ"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"entities","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Entities","title":"benchlingr","text":"data warehouse table, entity links represented identifiers. example , “analytes” custom-entity column, identifiers start “bfi_”. benchlingr package, can easily pull additional information entities table without writing SQL. get_entity_table function take warehouse table input return information entities contained within table. example, results table four distinct “analyte” entities appear. get_entity_table look correct warehouse table (analyte) rows correspond identifiers data. function also takes argument called columns allows one choose entity columns pull information . absence columns argument, function try pull information entity columns table. replace_entity_id_with_name function simply replace Benchling identifiers names entities. function work properly data frames multi-select, entity column expanded using shape='wide' argument expand_multiselect_column function. need replace identifiers multi-select, entity column, best use replace_entity_id_with_name function calling expand_multiselect_column.","code":"res <- expand_multiselect_column(conn, df, column=\"analytes\", shape=\"long\") res #>                         schema archived$ plate     analytes #> 1 simple_plate_analyte_mapping     FALSE     2 bfi_KsLU5uWV #> 2 simple_plate_analyte_mapping     FALSE     2 bfi_Q13AlXkf #> 3 simple_plate_analyte_mapping     FALSE     1 bfi_9fKcrORv #> 4 simple_plate_analyte_mapping     FALSE     1 bfi_VVamxrKQ get_entity_table(conn, res, columns = \"analytes\") #> $analytes #>             id    source_id  schema archived$ archive_purpose$  creator_id$ #> 1 bfi_Q13AlXkf src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 2 bfi_VVamxrKQ src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 3 bfi_KsLU5uWV src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 4 bfi_9fKcrORv src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #>           created_at$        modified_at$                  name$ #> 1 2022-09-20 13:07:45 2022-09-20 13:07:45          13C-Uric Acid #> 2 2022-09-20 13:07:45 2022-09-20 13:07:45 13C-Methylmalonic Acid #> 3 2022-09-20 13:07:45 2022-09-20 13:07:45          12C-Uric Acid #> 4 2022-09-20 13:07:45 2022-09-20 13:07:45 12C-Methylmalonic Acid #>   file_registry_id$  schema_id$   folder_id$  project_id$ #> 1              A004 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 2              A003 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 3              A002 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 4              A001 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #>                                                                                                                              url$ #> 1          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_Q13AlXkf-13c-uric-acid/edit #> 2 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_VVamxrKQ-13c-methylmalonic-acid/edit #> 3          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_KsLU5uWV-12c-uric-acid/edit #> 4 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_9fKcrORv-12c-methylmalonic-acid/edit #>   validation_status$         type$ is_registered$ precursor_ion_mz #> 1             PASSED custom_entity           TRUE            171.0 #> 2             PASSED custom_entity           TRUE            121.3 #> 3             PASSED custom_entity           TRUE            166.9 #> 4             PASSED custom_entity           TRUE            117.0 #>   product_ion_mz #> 1          126.0 #> 2           76.4 #> 3          123.9 #> 4           73.1 analytes <- replace_entity_id_with_name(conn, res) analytes #>                         schema archived$ plate               analytes #> 1 simple_plate_analyte_mapping     FALSE     2          12C-Uric Acid #> 2 simple_plate_analyte_mapping     FALSE     2          13C-Uric Acid #> 3 simple_plate_analyte_mapping     FALSE     1 12C-Methylmalonic Acid #> 4 simple_plate_analyte_mapping     FALSE     1 13C-Methylmalonic Acid head(df) #>                         schema archived$ plate                         analytes #> 1 simple_plate_analyte_mapping     FALSE     2 [\"bfi_KsLU5uWV\", \"bfi_Q13AlXkf\"] #> 2 simple_plate_analyte_mapping     FALSE     1 [\"bfi_9fKcrORv\", \"bfi_VVamxrKQ\"] res <- replace_entity_id_with_name(conn, df) res <- expand_multiselect_column(conn, res, column=\"analytes\", shape=\"wide\") #> New names: #> • `` -> `...1` #> • `` -> `...2` head(res) #>                         schema archived$ plate #> 1 simple_plate_analyte_mapping     FALSE     2 #> 2 simple_plate_analyte_mapping     FALSE     1 #>                                               analytes              analytes1 #> 1                   [\"12C-Uric Acid\", \"13C-Uric Acid\"]          12C-Uric Acid #> 2 [\"12C-Methylmalonic Acid\", \"13C-Methylmalonic Acid\"] 12C-Methylmalonic Acid #>                analytes2 #> 1          13C-Uric Acid #> 2 13C-Methylmalonic Acid"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"notebook-entries","dir":"Articles","previous_headings":"","what":"Notebook Entries","title":"benchlingr","text":"Notebook entries can found entry table data warehouse. Note, table contains notebook entry metadata, content entry . content notebook entries (aside results entities), must retrieved API. retrieve notebook entry, use entries$get_entry_by_id method. method takes ID entry argument, starts etr_.","code":"conn <- connect_warehouse(   \"hemoshear-dev\",   username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),   password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) DBI::dbGetQuery(conn,    \"SELECT id,display_id,schema_id,entry_template_id,review_status FROM entry\") %>%   head() #>             id  display_id schema_id entry_template_id review_status #> 1 etr_o2POZxzO EXP22000006      <NA>              <NA>          <NA> #> 2 etr_CaN3D2BF EXP23000001      <NA>              <NA>          <NA> #> 3 etr_f1bpDIes EXP22000001      <NA>              <NA>          <NA> #> 4 etr_T3WZTyAe EXP22000002      <NA>              <NA>          <NA> #> 5 etr_IWLMFYhR EXP23000002      <NA>              <NA>          <NA> #> 6 etr_aTa6eDWA EXP23000003      <NA>              <NA>          <NA> entry <- client$entries$get_entry_by_id(\"etr_T3WZTyAe\") class(entry) #> [1] \"benchling_api_client.v2.stable.models.entry.Entry\" #> [2] \"python.builtin.object\""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"reading-unstructured-tables-","dir":"Articles","previous_headings":"Notebook Entries","what":"Reading unstructured tables.","title":"benchlingr","text":"Benchling users can record information unstructured tables within notebook entries.","code":""},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"example-of-an-unstructured-table-in-a-benchling-notebook-entry","dir":"Articles","previous_headings":"","what":"benchlingr","title":"benchlingr","text":"get_entry_tables function extracts unstructured tables notebook entry, returns list data frames processing R.","code":"tables <- get_entry_tables(entry) tables[[1]] #>   sample_id treatment #> 1         1    Drug A #> 2         2    Drug A #> 3         3    Drug A #> 4         4   Control #> 5         5   Control #> 6         6   Control"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"reading-plate-diagrams-","dir":"Articles","previous_headings":"Notebook Entries","what":"Reading plate diagrams.","title":"benchlingr","text":"addition unstructured tables, Benchling users can create “plate diagrams” describe contents physical plates. plate diagram tables can certain sizes (2x3, 3x4, 4x6, 6x8, 8x12, 16x24, 32x48), column names must integers, row names must letters. Plate diagrams Benchling notebook entry. useful convert tables long form processing R. , one can start get_plate_diagrams function instead get_entry_tables function. get_plate_diagrams extract plate diagrams notebook entry convert output data frames long form tables three columns: row, column, content. row letter row plate, column integer column plate, content text appears cell table. names list names tables notebook entry.","code":"entry <- client$entries$get_entry_by_id(\"etr_f1bpDIes\") diagrams <- get_plate_diagrams(entry) str(diagrams) #> List of 2 #>  $ Well1:'data.frame':   384 obs. of  3 variables: #>   ..$ row    : chr [1:384] \"A\" \"B\" \"C\" \"D\" ... #>   ..$ column : chr [1:384] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ content: chr [1:384] \"1\" \"2\" \"3\" \"4\" ... #>  $ Well2:'data.frame':   96 obs. of  3 variables: #>   ..$ row    : chr [1:96] \"A\" \"B\" \"C\" \"D\" ... #>   ..$ column : chr [1:96] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ content: chr [1:96] \"1\" \"2\" \"3\" \"4\" ... head(diagrams$Well1) #>   row column content #> 1   A      1       1 #> 2   B      1       2 #> 3   C      1       3 #> 4   D      1       4 #> 5   E      1       5 #> 6   F      1       6"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"schemas-within-notebook-entries","dir":"Articles","previous_headings":"Notebook Entries","what":"Schemas within notebook entries","title":"benchlingr","text":"entities results can created tables within notebook entries. data analyst need query specific API endpoint warehouse table find registered entities results, one needs know schema associated entity results table. Benchling user can change name displayed tables notebook entry, always obvious schemas present notebook entry. Furthermore, data extracted warehouse, ’ll need know names warehouse tables query, always inferred schema names alone. example, suppose want know schemas tables notebook entry: Example notebook entry registration table results table. list_schemas_in_entry function returns table names results entity schemas contained within notebook entry. name system_name fields helpful tell look Benchling GUI data warehouse, respectively.","code":"entry <- client$entries$get_entry_by_id(\"etr_MWQ7M7Pz\") list_schemas_in_entry(client, conn, entry) #>                  id  schema_type                         name #> 1       ts_VvMdQcMn       entity                      Analyte #> 2 assaysch_nIw4yAq8 assay_result Simple Plate Analyte Mapping #>                    system_name archived$ archive_purpose$ #> 1                      analyte     FALSE             <NA> #> 2 simple_plate_analyte_mapping     FALSE             <NA>"},{"path":"https://benchling-r.info/articles/benchlingr.html","id":"downloading-attached-files","dir":"Articles","previous_headings":"","what":"Downloading attached files","title":"benchlingr","text":"Benchling users can attach files results entities, referred blobs. results table Benchling notebook entry files attached. schema name example table simple_plate_analyte_mapping, can query table get identifiers file names blobs download. case, use entry identifier filter table results actually care , one filter table various ways (ex. creation time). “blob” consists identifier, URL, name. download_blobs low-level wrapper Python SDK downloads set blobs Benchling specified ID file name. download_blobs_in_warehouse_table function download files attached particular set columns warehouse table. default, try download files blob columns unless specific set passed column argument. files column saved directory specified outdir. Alternatively, one can use column data frame specify files saved using outdir_columns argument.","code":"d <- DBI::dbGetQuery(conn,    \"SELECT id,plate,analytes,file FROM simple_plate_analyte_mapping$raw    WHERE entry_id$ = 'etr_JYUlMiIs'\") d #>                                     id plate         analytes #> 1 f72e61f1-a1dc-48d1-9e5e-ad5cb118d716     1 [\"bfi_9fKcrORv\"] #> 2 19ef2e88-761c-41d4-8a65-80acc2c30e3a     2 [\"bfi_VVamxrKQ\"] #>                                                                                                                                                                 file #> 1 {\"id\": \"ff0cca5f-b400-4e42-9df6-9f1badc4b7e2\", \"url\": \"https://hemoshear-dev.benchling.com/blobs/ff0cca5f-b400-4e42-9df6-9f1badc4b7e2\", \"name\": \"Plate1-Data.csv\"} #> 2 {\"id\": \"a2ed3ec8-59b9-451a-81eb-c4fb5322858b\", \"url\": \"https://hemoshear-dev.benchling.com/blobs/a2ed3ec8-59b9-451a-81eb-c4fb5322858b\", \"name\": \"Plate2-Data.csv\"} download_blobs(   client,    file_map = list(     \"ff0cca5f-b400-4e42-9df6-9f1badc4b7e2\" = \"Plate1-Data.csv\",     \"a2ed3ec8-59b9-451a-81eb-c4fb5322858b\" = \"Plate2-Data.csv\"),   outdir='data') download_blobs_in_warehouse_table(conn, d, column='file', outdir=\"data\") d$outdir <- file.path(\"data\", d$id) download_blobs_in_warehouse_table(conn, d, column='file', outdir_columns=\"outdir\")"},{"path":"https://benchling-r.info/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin Taylor. Maintainer. Davut Uçar. Author. Steve Hoang. Author. Aakshay Kumar. Author.","code":""},{"path":"https://benchling-r.info/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Uçar D, Hoang S, Kumar (2023). benchlingr: Access 'Benchling' RESTFUL API data warehouse. https://github.com/hemoshear/benchlingr, https://upgraded-succotash-8df2b926.pages.github.io/.","code":"@Manual{,   title = {benchlingr: Access the 'Benchling' RESTFUL API and data warehouse},   author = {Davut Uçar and Steve Hoang and Aakshay Kumar},   year = {2023},   note = {https://github.com/hemoshear/benchlingr, https://upgraded-succotash-8df2b926.pages.github.io/}, }"},{"path":[]},{"path":"https://benchling-r.info/index.html","id":"unofficial-r-interface-to-the-benchling-cloud-rd-laboratory-information-management-system-lims","dir":"","previous_headings":"","what":"Unofficial R Interface to the “Benchling Cloud R&D” Laboratory Information Management System (LIMS).","title":"Access the Benchling RESTFUL API and data warehouse","text":"Benchling laboratory information management system (LIMS) developer platform comprised Postgres database, application programming interface (API), “Events” system built top AWS EventBridge service, well Python software development kit (SDK). benchlingr unofficial R package streamlines common data science engineering operations providing functions extract join tables Benchling data warehouse, download file attachments, extract tables notebook entries, upload assay results Benchling platform.","code":""},{"path":"https://benchling-r.info/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access the Benchling RESTFUL API and data warehouse","text":"Install R package directly GitHub using install_github function remotes package. Use install.packages('remotes') install remotes package already see documentation ?remotes::install_github information.","code":"remotes::install_github(\"hemoshear/benchlingr\")"},{"path":"https://benchling-r.info/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Access the Benchling RESTFUL API and data warehouse","text":"Read documentation GitHub","code":""},{"path":"https://benchling-r.info/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Access the Benchling RESTFUL API and data warehouse","text":"Please use GitHub issues questions, feature requests, bug reports. submitting bug report, please include output sessioninfo::session_info(), well code help us understand problem.","code":""},{"path":"https://benchling-r.info/index.html","id":"benchling-credentials","dir":"","previous_headings":"","what":"Benchling credentials","title":"Access the Benchling RESTFUL API and data warehouse","text":"benchlingr package uses RESTFUL API Postgres database components Benchling developer platform. order access API database, one must acquire API keys database credentials Benchling interface. section focus make credentials available benchlingr package. Note: unable generate API key /database credentials, may need ask Benchling administrator developer access","code":""},{"path":"https://benchling-r.info/index.html","id":"api","dir":"","previous_headings":"Benchling credentials","what":"API","title":"Access the Benchling RESTFUL API and data warehouse","text":"order access Benchling API service one’s Benchling tenant, one must obtain API key Benchling interface.. obtaining API key, recommended define variable .Renviron called BENCHLING_API_KEY make key accessible benchlingr package, since functions package look BENCHLING_API_KEY default.","code":"# ~/.Renviron  # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx"},{"path":"https://benchling-r.info/index.html","id":"data-warehouse","dir":"","previous_headings":"Benchling credentials","what":"Data warehouse","title":"Access the Benchling RESTFUL API and data warehouse","text":"Follow instructions official documentation obtain username password data warehouse Benchling tenant. obtaining username password, recommended one define variable .Renviron called BENCHLING_WAREHOUSE_KEY BENCHLING_WAREHOUSE_PASSWORD make credentials available benchlingr default settings.","code":"# ~/.Renviron  # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx  # Benchling warehouse credentials BENCHLING_WAREHOUSE_USERNAME=yyyyyyyyyyy BENCHLING_WAREHOUSE_PASSWORD=xxxxxxxxxxx"},{"path":"https://benchling-r.info/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Access the Benchling RESTFUL API and data warehouse","text":"See contribution guidelines information.","code":""},{"path":"https://benchling-r.info/reference/archive_assay_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a direct API Call to Benchling Assay Result Archive endpoint — archive_assay_results","title":"Makes a direct API Call to Benchling Assay Result Archive endpoint — archive_assay_results","text":"https://benchling.com/api/reference#/Assay","code":""},{"path":"https://benchling-r.info/reference/archive_assay_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a direct API Call to Benchling Assay Result Archive endpoint — archive_assay_results","text":"","code":"archive_assay_results(   tenant = Sys.getenv(\"BENCHLING_TENANT\"),   api_key = Sys.getenv(\"BENCHLING_API_KEY\"),   assay_result_ids = NULL,   reason = \"Made in error\" )"},{"path":"https://benchling-r.info/reference/archive_assay_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a direct API Call to Benchling Assay Result Archive endpoint — archive_assay_results","text":"tenant tenant name api_key api key assay_result_ids vector type assay result ids. function supports archiving multiple items one function call reason reason archiving operation. \"Made error\" default can change wish based supported reasons Benchling","code":""},{"path":"https://benchling-r.info/reference/archive_assay_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a direct API Call to Benchling Assay Result Archive endpoint — archive_assay_results","text":"assay_result_ids","code":""},{"path":"https://benchling-r.info/reference/archive_assay_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a direct API Call to Benchling Assay Result Archive endpoint — archive_assay_results","text":"","code":"if (FALSE) { assay_result_ids <- assay_result_ids=c(\"908df834-220e-4b59-975b-c21bbbb8191a\") reason = \"Made in error\" }"},{"path":"https://benchling-r.info/reference/config_sdk_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure environment for accessing API — config_sdk_env","title":"Configure environment for accessing API — config_sdk_env","text":"Helper function create Anaconda environment install Benchling Python SDK (`benchling-sdk`) pip. Anaconda environment used reticulate package R.","code":""},{"path":"https://benchling-r.info/reference/config_sdk_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure environment for accessing API — config_sdk_env","text":"","code":"config_sdk_env(env_name = \"benchling-reticulate\", env_type = \"virtualenv\")"},{"path":"https://benchling-r.info/reference/config_sdk_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure environment for accessing API — config_sdk_env","text":"env_name Name new environment created. default name 'benchling-reticulate'. env_type 'virtualenv' 'conda'. (ex. 'options(BENCHLINGR_RETICULATE_ENV = \"my_env_name\")')","code":""},{"path":"https://benchling-r.info/reference/config_sdk_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure environment for accessing API — config_sdk_env","text":"","code":"if (FALSE) { config_sdk_env() }"},{"path":"https://benchling-r.info/reference/connect_sdk.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Benchling API client that can be used to access the API via R. — connect_sdk","title":"Create a Benchling API client that can be used to access the API via R. — connect_sdk","text":"Create Benchling API client can used access API via R.","code":""},{"path":"https://benchling-r.info/reference/connect_sdk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Benchling API client that can be used to access the API via R. — connect_sdk","text":"","code":"connect_sdk(tenant, api_key = Sys.getenv(\"BENCHLING_API_KEY\"))"},{"path":"https://benchling-r.info/reference/connect_sdk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Benchling API client that can be used to access the API via R. — connect_sdk","text":"tenant URL Benchling tenant (character). api_key API key Benchling tenant (character). default value \"BENCHLING_API_KEY\" environment variable `.Renviron` file.","code":""},{"path":"https://benchling-r.info/reference/connect_sdk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Benchling API client that can be used to access the API via R. — connect_sdk","text":"Benchling API client object can used accessing  API via R.","code":""},{"path":"https://benchling-r.info/reference/connect_sdk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Benchling API client that can be used to access the API via R. — connect_sdk","text":"","code":"if (FALSE) { client <- connect_sdk(tenant=\"https://my-company-tenant-name.benchling.com\") }"},{"path":"https://benchling-r.info/reference/connect_warehouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a Benchling data warehouse — connect_warehouse","title":"Connect to a Benchling data warehouse — connect_warehouse","text":"Open connection data warehouse particular Benchling tenant using `DBI` `RPostgres` packages.","code":""},{"path":"https://benchling-r.info/reference/connect_warehouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a Benchling data warehouse — connect_warehouse","text":"","code":"connect_warehouse(   tenant,   username = Sys.getenv(\"BENCHLING_WAREHOUSE_USERNAME\"),   password = Sys.getenv(\"BENCHLING_WAREHOUSE_PASSWORD\") )"},{"path":"https://benchling-r.info/reference/connect_warehouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a Benchling data warehouse — connect_warehouse","text":"tenant Name Benchling tenant warehouse connection opened (character). username Username Benchling tenant (character). default argument 'BENCHLING_WAREHOUSE_USERNAME' environment variable `.Renviron` file. password Password Benchling tenant (character). default argument 'BENCHLING_WAREHOUSE_PASSWORD' environment variable  `.Renviron` file.","code":""},{"path":"https://benchling-r.info/reference/connect_warehouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a Benchling data warehouse — connect_warehouse","text":"'database_connection***' object can used `DBI` package make queries Postgres database specified tenant.","code":""},{"path":"https://benchling-r.info/reference/connect_warehouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a Benchling data warehouse — connect_warehouse","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_WAREHOUSE_PASSWORD\")) # It is good practice to close the connection after finishing your queries.  DBI::dbDisconnect(conn) }"},{"path":"https://benchling-r.info/reference/create_assay_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload assay results to Benchling from a data frame — create_assay_results","title":"Upload assay results to Benchling from a data frame — create_assay_results","text":"Upload assay results Benchling data frame","code":""},{"path":"https://benchling-r.info/reference/create_assay_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload assay results to Benchling from a data frame — create_assay_results","text":"","code":"create_assay_results(   conn,   client,   df,   project_id,   schema_id,   fk_type = \"name\",   tenant = Sys.getenv(\"BENCHLING_TENANT\"),   api_key = Sys.getenv(\"BENCHLING_API_KEY\") )"},{"path":"https://benchling-r.info/reference/create_assay_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload assay results to Benchling from a data frame — create_assay_results","text":"conn Database connection. client Benchling API client. df Data frame / tibble results uploaded Benchling. project_id Benchling project identifier. schema_id Results schema ID (starts \"assaysch_\"). fk_type entity links identifiers names? tenant URL Benchling tenant. api_key API key Benchling tenant.","code":""},{"path":"https://benchling-r.info/reference/create_assay_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload assay results to Benchling from a data frame — create_assay_results","text":"","code":"if (FALSE) { schema_id <- \"assaysch_yKoqVsej\" conn <- connect_warehouse(\"hemoshear-dev\") api_key <- Sys.getenv(\"BENCHLING_DEV_API_KEY\") tenant <- \"hemoshear-dev\" }"},{"path":"https://benchling-r.info/reference/disconnect_warehouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect from a Benchling data warehouse — disconnect_warehouse","title":"Disconnect from a Benchling data warehouse — disconnect_warehouse","text":"Close already opened connection data warehouse.","code":""},{"path":"https://benchling-r.info/reference/disconnect_warehouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect from a Benchling data warehouse — disconnect_warehouse","text":"","code":"disconnect_warehouse(conn)"},{"path":"https://benchling-r.info/reference/disconnect_warehouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect from a Benchling data warehouse — disconnect_warehouse","text":"conn warehouse connection object class PqConnection usually  returned connect_warehouse()","code":""},{"path":"https://benchling-r.info/reference/disconnect_warehouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disconnect from a Benchling data warehouse — disconnect_warehouse","text":"TRUE, invisibly","code":""},{"path":"https://benchling-r.info/reference/disconnect_warehouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disconnect from a Benchling data warehouse — disconnect_warehouse","text":"","code":"if (FALSE) { conn <- connect_warehouse(tenant = \"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_WAREHOUSE_PASSWORD\")) disconnect_warehouse(conn)     }"},{"path":"https://benchling-r.info/reference/dot-create_assay_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an assay result to be uploaded to Benchling — .create_assay_result","title":"Create an assay result to be uploaded to Benchling — .create_assay_result","text":"Create assay result uploaded Benchling","code":""},{"path":"https://benchling-r.info/reference/dot-create_assay_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an assay result to be uploaded to Benchling — .create_assay_result","text":"","code":".create_assay_result(   project_id,   schema_id,   fields,   id = NULL,   field_validation = NULL )"},{"path":"https://benchling-r.info/reference/dot-create_assay_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an assay result to be uploaded to Benchling — .create_assay_result","text":"project_id Identifier Benchling project fields List keys strings corresponding field names. values lists least one element named `value`, value submitted field.  ex. list(study = list(value = \"MyFakeStudy\")) id UUID result. Optional field_validation Field validation result. Optional. schema Identifier result schema","code":""},{"path":"https://benchling-r.info/reference/dot-create_assay_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an assay result to be uploaded to Benchling — .create_assay_result","text":"List passed `upload_assay_result`.","code":""},{"path":"https://benchling-r.info/reference/dot-get_entity_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get additional information about entity links in a warehouse table (single entity column.) — .get_entity_table","title":"Get additional information about entity links in a warehouse table (single entity column.) — .get_entity_table","text":"Given data frame retrieved Benchling warehouse, extract additional table warehouse correspond entity links table.","code":""},{"path":"https://benchling-r.info/reference/dot-get_entity_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get additional information about entity links in a warehouse table (single entity column.) — .get_entity_table","text":"","code":".get_entity_table(conn, df, column, return_cols = c(\"id\", \"name$\"), key = \"id\")"},{"path":"https://benchling-r.info/reference/dot-get_entity_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get additional information about entity links in a warehouse table (single entity column.) — .get_entity_table","text":"conn Database connection opened `connect_warehouse` df Data frame retrieved Benchling data warehouse one entity link columns.  data frame must also column called `schema`, indicates schema name warehouse table. One can use `DBI::dbReadTable` `DBI::dbGetQuery` retrieve tables data warehouse. column Name entity link column. return_cols Character vector warehouse column names include results. `return_cols` missing, every column returned. key column data warehouse table used primary key, can `id` `name$`. default option, `id`,  Benchling identifier. `name$` option used table   transformed `replace_entity_id_with_name`.","code":""},{"path":"https://benchling-r.info/reference/dot-get_entity_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get additional information about entity links in a warehouse table (single entity column.) — .get_entity_table","text":"data frame rows warehouse table correspond  entities found input data frame (`df`).","code":""},{"path":"https://benchling-r.info/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"schema field name can differ schema name , function uses `schema` `schema_field` tables warehouse link  field name one schema actual name entity.","code":""},{"path":"https://benchling-r.info/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"","code":".map_entity_field_names_to_warehouse_tables(conn, df)"},{"path":"https://benchling-r.info/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"conn Database connection opened `connect_warehouse` df data.frame one fields entity types.","code":""},{"path":"https://benchling-r.info/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"vector names warehouse names fields  schema values warehouse names entities  schema","code":""},{"path":"https://benchling-r.info/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"","code":"if (FALSE) { conn <- connect_warehouse( \"hemoshear-dev\",  username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),  password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\"))    d <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\")  .map_entity_field_names_to_warehouse_tables(conn, d)  }"},{"path":"https://benchling-r.info/reference/dot-missing_api_key_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop function execution if API key is an empty string. — .missing_api_key_error","title":"Stop function execution if API key is an empty string. — .missing_api_key_error","text":"Stop function execution API key empty string.","code":""},{"path":"https://benchling-r.info/reference/dot-missing_api_key_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop function execution if API key is an empty string. — .missing_api_key_error","text":"","code":".missing_api_key_error()"},{"path":"https://benchling-r.info/reference/dot-missing_api_key_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop function execution if API key is an empty string. — .missing_api_key_error","text":"Nothing.","code":""},{"path":"https://benchling-r.info/reference/dot-missing_tenant_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop function execution if tenant is an empty string. — .missing_tenant_error","title":"Stop function execution if tenant is an empty string. — .missing_tenant_error","text":"Stop function execution tenant empty string.","code":""},{"path":"https://benchling-r.info/reference/dot-missing_tenant_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop function execution if tenant is an empty string. — .missing_tenant_error","text":"","code":".missing_tenant_error()"},{"path":"https://benchling-r.info/reference/dot-missing_tenant_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop function execution if tenant is an empty string. — .missing_tenant_error","text":"Nothing.","code":""},{"path":"https://benchling-r.info/reference/dot-to_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise exception if the `schema` column is not in the data frame.\n This function takes a data frame and converts each row into the nested list that .create_assay_result needs. — .to_fields","title":"Raise exception if the `schema` column is not in the data frame.\n This function takes a data frame and converts each row into the nested list that .create_assay_result needs. — .to_fields","text":"Raise exception `schema` column data frame.  function takes data frame converts row nested list .create_assay_result needs.","code":""},{"path":"https://benchling-r.info/reference/dot-to_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise exception if the `schema` column is not in the data frame.\n This function takes a data frame and converts each row into the nested list that .create_assay_result needs. — .to_fields","text":"","code":".to_fields(df)"},{"path":"https://benchling-r.info/reference/dot-to_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise exception if the `schema` column is not in the data frame.\n This function takes a data frame and converts each row into the nested list that .create_assay_result needs. — .to_fields","text":"df data.frame table data warehouse.","code":""},{"path":"https://benchling-r.info/reference/dot-to_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise exception if the `schema` column is not in the data frame.\n This function takes a data frame and converts each row into the nested list that .create_assay_result needs. — .to_fields","text":"res","code":""},{"path":"https://benchling-r.info/reference/dot-unpack_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack the values of a JSON column into new rows — .unpack_long","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"Unpack values JSON column new rows","code":""},{"path":"https://benchling-r.info/reference/dot-unpack_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"","code":".unpack_long(df, column)"},{"path":"https://benchling-r.info/reference/dot-unpack_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"df Data frame JSON columns unpacked new rows. column Name JSON column unpacked.","code":""},{"path":"https://benchling-r.info/reference/dot-unpack_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"Data frame values JSON column unpacked.","code":""},{"path":"https://benchling-r.info/reference/dot-unpack_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack the values of a JSON column into new columns — .unpack_wide","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"Unpack values JSON column new columns","code":""},{"path":"https://benchling-r.info/reference/dot-unpack_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"","code":".unpack_wide(df, column)"},{"path":"https://benchling-r.info/reference/dot-unpack_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"df Data frame JSON columns unpacked new columns column Name JSON column unpacked.","code":""},{"path":"https://benchling-r.info/reference/dot-unpack_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"Data frame values JSON column unpacked.","code":""},{"path":"https://benchling-r.info/reference/dot-upload_files.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload files represented by one or more columns in a data frame containing\nfile paths. — .upload_files.data.frame","title":"Upload files represented by one or more columns in a data frame containing\nfile paths. — .upload_files.data.frame","text":"Upload files represented one columns data frame containing file paths.","code":""},{"path":"https://benchling-r.info/reference/dot-upload_files.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload files represented by one or more columns in a data frame containing\nfile paths. — .upload_files.data.frame","text":"","code":"# S3 method for data.frame .upload_files(file, client, blob_link_cols = NULL)"},{"path":"https://benchling-r.info/reference/dot-upload_files.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload files represented by one or more columns in a data frame containing\nfile paths. — .upload_files.data.frame","text":"file data.frame one columns containing files  uploaded. blob_link_cols Character vector column names containing files uploaded","code":""},{"path":"https://benchling-r.info/reference/dot-upload_files.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload files represented by one or more columns in a data frame containing\nfile paths. — .upload_files.data.frame","text":"","code":"if (FALSE) { client <- benchlingr::connect_sdk( tenant=\"https://hemoshear-dev.benchling.com\", api_key = Sys.getenv(\"BENCHLING_DEV_API_KEY\")) df <- data.frame(file = \"upload_files.R\") upload_files.data.frame(file=df, client=client, blob_link_cols=\"file\") }"},{"path":"https://benchling-r.info/reference/dot-upload_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload a character vector — .upload_files","title":"Upload a character vector — .upload_files","text":"Upload character vector","code":""},{"path":"https://benchling-r.info/reference/dot-upload_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload a character vector — .upload_files","text":"","code":".upload_files(file, client, blob_link_cols = NULL)"},{"path":"https://benchling-r.info/reference/dot-upload_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload a character vector — .upload_files","text":"file Character vector, list, data frame file names uploaded. client Benchling Python SDK object blob_link_cols data frame provided, names blob link columns must specified.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_blob_link_column_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that values in a blob link column refer to valid file paths on the \nlocal machine or that identifiers already exist. — .validate_blob_link_column_values","title":"Verify that values in a blob link column refer to valid file paths on the \nlocal machine or that identifiers already exist. — .validate_blob_link_column_values","text":"Verify values blob link column refer valid file paths  local machine identifiers already exist.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_blob_link_column_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that values in a blob link column refer to valid file paths on the \nlocal machine or that identifiers already exist. — .validate_blob_link_column_values","text":"","code":".validate_blob_link_column_values(   client,   errors,   values,   column_name,   multi_select,   fk_type )"},{"path":"https://benchling-r.info/reference/dot-validate_blob_link_column_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that values in a blob link column refer to valid file paths on the \nlocal machine or that identifiers already exist. — .validate_blob_link_column_values","text":"errors Errors values Values column. column_name Name column input data frame. fk_type \"id\" \"name\". Use \"id\" blob already exists  Benchling submitting ID blob. Use \"name\" file already exist Benchling blob need upload file Benchling.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_column_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure that column types are valid for a data frame that is to be uploaded\nto Benchling as a results table. — .validate_column_types","title":"Ensure that column types are valid for a data frame that is to be uploaded\nto Benchling as a results table. — .validate_column_types","text":"integer|float --> numeric text|entity_link|dropdown|long_text|storage_link|blob_link|dna_sequence_link --> character","code":""},{"path":"https://benchling-r.info/reference/dot-validate_column_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure that column types are valid for a data frame that is to be uploaded\nto Benchling as a results table. — .validate_column_types","text":"","code":".validate_column_types(   errors,   values,   column_name,   benchling_type,   multi_select )"},{"path":"https://benchling-r.info/reference/dot-validate_column_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the values in the column of a results table. — .validate_column_values","title":"Validate the values in the column of a results table. — .validate_column_values","text":"column refers entity link field, entity IDs input data frame checked currently registry. column dropdown, values checked dropdown options.  column storage link, function checks see IDs  input data frame exist inventory. column refers blob link field, function assume values file paths check see file exists local machine.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_column_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the values in the column of a results table. — .validate_column_values","text":"","code":".validate_column_values(   conn,   client,   errors,   values,   column_name,   benchling_type,   multi_select,   fk_type,   target_schema_id )"},{"path":"https://benchling-r.info/reference/dot-validate_column_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the values in the column of a results table. — .validate_column_values","text":"conn Database connection typically opened `connect_warehouse`. client Benchling SDK object typically created `connect_sdk`. errors Character vector errors. values Values column. column_name Name column data frame uploaded Benchling. benchling_type Benchling \"type\" column corresponds . multi_select Boolean indicating whether column corresponds multi-select field. fk_type String \"id\" \"name$\" indicates whether column represents Benchling ID name entities. target_schema_id name warehouse table corresponds column.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise exception if the `schema` column is not in the data frame.\n Dataframe validation — .validate_data_frame","title":"Raise exception if the `schema` column is not in the data frame.\n Dataframe validation — .validate_data_frame","text":"Raise exception `schema` column data frame.  Dataframe validation","code":""},{"path":"https://benchling-r.info/reference/dot-validate_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise exception if the `schema` column is not in the data frame.\n Dataframe validation — .validate_data_frame","text":"","code":".validate_data_frame(conn, client, df, fk_type = \"name\", mappings)"},{"path":"https://benchling-r.info/reference/dot-validate_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise exception if the `schema` column is not in the data frame.\n Dataframe validation — .validate_data_frame","text":"conn Data warehouse connection typically opened `connect_warehouse`. client API facade object df data.frame table data warehouse.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise exception if the `schema` column is not in the data frame.\n Dataframe validation — .validate_data_frame","text":"error list","code":""},{"path":"https://benchling-r.info/reference/dot-validate_dropdown_column_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that values in dropdown column are valid options in the dropdown schema. — .validate_dropdown_column_values","title":"Verify that values in dropdown column are valid options in the dropdown schema. — .validate_dropdown_column_values","text":"Verify values dropdown column valid options dropdown schema.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_dropdown_column_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that values in dropdown column are valid options in the dropdown schema. — .validate_dropdown_column_values","text":"","code":".validate_dropdown_column_values(   conn,   errors,   values,   column_name,   dropdown_id )"},{"path":"https://benchling-r.info/reference/dot-validate_entity_column_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that the identifiers (or names) for an entity link field match\nidentifiers (or names) that currently exist in the registry. — .validate_entity_column_values","title":"Verify that the identifiers (or names) for an entity link field match\nidentifiers (or names) that currently exist in the registry. — .validate_entity_column_values","text":"Verify identifiers (names) entity link field match identifiers (names) currently exist registry.","code":""},{"path":"https://benchling-r.info/reference/dot-validate_entity_column_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that the identifiers (or names) for an entity link field match\nidentifiers (or names) that currently exist in the registry. — .validate_entity_column_values","text":"","code":".validate_entity_column_values(   conn,   errors,   values,   column_name,   target_schema_id,   fk_type )"},{"path":"https://benchling-r.info/reference/dot-vec2sql_tuple.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"Convert vector valid tuple can used SQL queries.","code":""},{"path":"https://benchling-r.info/reference/dot-vec2sql_tuple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"","code":".vec2sql_tuple(x)"},{"path":"https://benchling-r.info/reference/dot-vec2sql_tuple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"x Character numeric vector","code":""},{"path":"https://benchling-r.info/reference/dot-vec2sql_tuple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"character vector represents SQL tuple used SQL queries.","code":""},{"path":"https://benchling-r.info/reference/dot-vec2sql_tuple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"","code":"if (FALSE) { x <- c('A', 'B', 'C') res <- .vec2sql_tuple(x) y <- c(1, 2) res <- .vec2sql_tuple(y) }"},{"path":"https://benchling-r.info/reference/download_blobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download file attachments from Benchling — download_blobs","title":"Download file attachments from Benchling — download_blobs","text":"Download \"blobs\" attached Benchling entities results.","code":""},{"path":"https://benchling-r.info/reference/download_blobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download file attachments from Benchling — download_blobs","text":"","code":"download_blobs(client, file_map, outdir, condaenv = \"benchling-reticulate\")"},{"path":"https://benchling-r.info/reference/download_blobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download file attachments from Benchling — download_blobs","text":"client Benchling client object created `connect_sdk()`. file_map List names blob (file) identifiers values file names. outdir Directory save output files. condaenv Name conda environment use. Defaults  `benchling-reticulate`.","code":""},{"path":"https://benchling-r.info/reference/download_blobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download file attachments from Benchling — download_blobs","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM  non_barcode_plate_file_results$raw WHERE study_codes::text LIKE  '%bfi_jUgN7fPL%'\") file_col <- purrr::map(as.character(res$excel_file),                       ~ RJSONIO::fromJSON(.) %>% .[[1]]) file_map <- purrr::map_chr(file_col, ~ .['name']) names(file_map) <- purrr::map_chr(file_col, ~ .['id']) file_map <- as.list(file_map) download_blobs(file_map, outdir='data') }"},{"path":"https://benchling-r.info/reference/download_blobs_in_warehouse_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"Download blobs contained within warehouse table.","code":""},{"path":"https://benchling-r.info/reference/download_blobs_in_warehouse_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"","code":"download_blobs_in_warehouse_table(   client,   conn,   df,   columns = NULL,   outdir = NULL,   outdir_column = NULL )"},{"path":"https://benchling-r.info/reference/download_blobs_in_warehouse_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"client Benchling API client object. conn PqConnection object. df Data frame one blob link (file attachment) columns.  data frame must also column called `schema`, indicates schema name warehouse table. One can use `DBI::dbReadTable` `DBI::dbGetQuery` retrieve tables data warehouse. columns Character vector column names table download  blobs . outdir Directory files saved local machine. Subdirectories created within directory blob link column data frame. `outdir_column` provided, argument  ignored. outdir_column Column data frame represents directories files saved. argument overrides `outdir`.","code":""},{"path":"https://benchling-r.info/reference/download_blobs_in_warehouse_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"","code":"if (FALSE) { library(magrittr) client <- connect_sdk(\"https://hemoshear.benchling.com\") conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM   non_barcode_plate_file_results$raw WHERE study_codes::text LIKE   '%bfi_jUgN7fPL%'\") download_blobs_in_warehouse_table(conn, res, outdir='temp_data_dir/') }"},{"path":"https://benchling-r.info/reference/expand_multiselect_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"schema contains multi-select field, column data frame retrieved data warehouse JSON type. function allows one unpack values column, creating either new rows new  columns data frame.","code":""},{"path":"https://benchling-r.info/reference/expand_multiselect_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"","code":"expand_multiselect_column(   conn,   df,   column,   shape = \"long\",   column_prefix = NULL )"},{"path":"https://benchling-r.info/reference/expand_multiselect_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"conn Database connection opened `connect_warehouse`. used ensure specified `column` actually multi-select field defined schema. df Data frame retrieved Benchling data warehouse one  multi-select columns. data frame must also column called `schema`,  indicates schema name warehouse table.  One can use `DBI::dbReadTable` `DBI::dbGetQuery` retrieve tables  data warehouse. column Name JSON column expanded. shape `shape` argument determines values JSON column unpacked create new rows (`long`) new columns (`wide`). column_prefix `shape` argument `wide`, new columns created data frame. default, new column names start name original column end integer (1, 2, ...,  number maximum values single row JSON field.). One can override behavior passing character vector `column_prefix` argument. Using `column_prefix` argument recommended column entity type, one able use `get_entity_table`  `replace_entity_id_with_name` new columns.","code":""},{"path":"https://benchling-r.info/reference/expand_multiselect_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"Data frame values `column` unpacked.","code":""},{"path":"https://benchling-r.info/reference/expand_multiselect_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) d <- DBI::dbGetQuery(conn, \"SELECT plate,analytes FROM simple_plate_analyte_mapping$raw  WHERE entry_id$ = 'etr_MWQ7M7Pz'\") res <- expand_multiselect_column(conn, d, column=\"analytes\", shape=\"long\") res <- expand_multiselect_column(conn, d, column=\"analytes\", shape=\"wide\") DBI::dbDisconnect(conn) }"},{"path":"https://benchling-r.info/reference/get_assay_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a direct API Call to Benchling Get Assay Result endpoint. — get_assay_result","title":"Makes a direct API Call to Benchling Get Assay Result endpoint. — get_assay_result","text":"https://benchling.com/api/reference#/Assay","code":""},{"path":"https://benchling-r.info/reference/get_assay_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a direct API Call to Benchling Get Assay Result endpoint. — get_assay_result","text":"","code":"get_assay_result(   tenant = Sys.getenv(\"BENCHLING_TENANT\"),   api_key = Sys.getenv(\"BENCHLING_API_KEY\"),   assay_result_id = \"\" )"},{"path":"https://benchling-r.info/reference/get_assay_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a direct API Call to Benchling Get Assay Result endpoint. — get_assay_result","text":"tenant tenant name api_key api key assay_result_id id assay result.","code":""},{"path":"https://benchling-r.info/reference/get_assay_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a direct API Call to Benchling Get Assay Result endpoint. — get_assay_result","text":"assay result details","code":""},{"path":"https://benchling-r.info/reference/get_assay_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a direct API Call to Benchling Get Assay Result endpoint. — get_assay_result","text":"","code":"if (FALSE) { assay_result_id <- '908df834-220e-4b59-975b-c21bbbb8191a' }"},{"path":"https://benchling-r.info/reference/get_assay_results_schema_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Benchling assay results metadata — get_assay_results_schema_ids","title":"Get Benchling assay results metadata — get_assay_results_schema_ids","text":"Get Benchling assay results metadata","code":""},{"path":"https://benchling-r.info/reference/get_assay_results_schema_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Benchling assay results metadata — get_assay_results_schema_ids","text":"","code":"get_assay_results_schema_ids(conn)"},{"path":"https://benchling-r.info/reference/get_assay_results_schema_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Benchling assay results metadata — get_assay_results_schema_ids","text":"conn Database connection opened `connect_warehouse`.","code":""},{"path":"https://benchling-r.info/reference/get_assay_results_schema_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Benchling assay results metadata — get_assay_results_schema_ids","text":"data.frame `id` `name` attributes Benchling assay results","code":""},{"path":"https://benchling-r.info/reference/get_dropdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata for a dropdown menu — get_dropdown","title":"Get metadata for a dropdown menu — get_dropdown","text":"Get metadata dropdown menu","code":""},{"path":"https://benchling-r.info/reference/get_dropdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata for a dropdown menu — get_dropdown","text":"","code":"get_dropdown(conn, name)"},{"path":"https://benchling-r.info/reference/get_dropdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata for a dropdown menu — get_dropdown","text":"conn Database connection opened `connect_warehouse`. name Schema name dropdown. value stored `name` column `dropdown` table Benchling data warehouse.  name dropdown set created, follow specific pattern.","code":""},{"path":"https://benchling-r.info/reference/get_dropdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata for a dropdown menu — get_dropdown","text":"","code":"if (FALSE) { # Connect to the Benchling data warehouse conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) # To see all dropdown menus, you can read the entire `dropdown` table.  # This won't pull the dropdown options that correspond to each dropdown, # so it probably won't be that large.  DBI::dbReadTable(conn, \"dropdown\") }"},{"path":"https://benchling-r.info/reference/get_dropdown_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the options in a dropdown menu — get_dropdown_options","title":"Get the options in a dropdown menu — get_dropdown_options","text":"Get options dropdown menu","code":""},{"path":"https://benchling-r.info/reference/get_dropdown_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the options in a dropdown menu — get_dropdown_options","text":"","code":"get_dropdown_options(conn, schema_id)"},{"path":"https://benchling-r.info/reference/get_dropdown_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the options in a dropdown menu — get_dropdown_options","text":"conn Database connection opened `connect_warehouse`. schema_id Schema ID dropdown. value stored `id` column `dropdown` table Benchling data warehouse. always start `sfs_`. can find dropdown menus Benchling interface clicking \"Registries\" grid, \"Registry setting\" cog icon, \"Dropdowns\".","code":""},{"path":"https://benchling-r.info/reference/get_dropdown_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the options in a dropdown menu — get_dropdown_options","text":"character vector dropdown menu options","code":""},{"path":"https://benchling-r.info/reference/get_dropdown_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the options in a dropdown menu — get_dropdown_options","text":"","code":"if (FALSE) { # Connect to the Benchling data warehouse conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) # To see all dropdown menus, you can read the entire `dropdown` table.  # This won't pull the dropdown options that correspond to each dropdown, # so it probably won't be that large.  DBI::dbReadTable(conn, \"dropdown\") }"},{"path":"https://benchling-r.info/reference/get_entity_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get additional information about entities in a warehouse table — get_entity_table","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"Given data frame retrieved Benchling warehouse, extract additional tables warehouse correspond entities  data frame.","code":""},{"path":"https://benchling-r.info/reference/get_entity_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"","code":"get_entity_table(conn, df, columns = NULL, return_cols = \"*\", key = \"id\")"},{"path":"https://benchling-r.info/reference/get_entity_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"conn Database connection opened `connect_warehouse` df Data frame retrieved Benchling data warehouse one entity link columns.  data frame must also column called `schema`, indicates schema name warehouse table. One can use `DBI::dbReadTable` `DBI::dbGetQuery` retrieve tables data warehouse. columns Character vector column names expand. NULL, entity columns expanded. see columns data frame correspond entity fields, use `list_entity_columns` tables. return_cols Character vector warehouse columns return entity. default value (`*`) return every column. specifying different  set columns return, recommended one includes `id`  `name$` columns. explicitly included, function  add implicitly. key column data warehouse table used primary key, can `id` `name$`. default option, `id`, Benchling identifier. `name$` option used table  transformed `replace_entity_id_with_name`.","code":""},{"path":"https://benchling-r.info/reference/get_entity_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"List data frames rows warehouse table correspond  entities found input data frame (`df`). element list  corresponds entity column input data frame.","code":""},{"path":"https://benchling-r.info/reference/get_entity_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",     username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),    password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) df <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\") get_entity_table(conn,  df) }"},{"path":"https://benchling-r.info/reference/get_entry_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read unstructured table in a notebook entry — get_entry_table","title":"Read unstructured table in a notebook entry — get_entry_table","text":"Read unstructured table notebook entry","code":""},{"path":"https://benchling-r.info/reference/get_entry_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read unstructured table in a notebook entry — get_entry_table","text":"","code":"get_entry_table(   entry,   day = NULL,   table_position = NULL,   return_table_name = TRUE )"},{"path":"https://benchling-r.info/reference/get_entry_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read unstructured table in a notebook entry — get_entry_table","text":"entry Notebook entry JSON format. day Integer day notebook entry. See `list_entry_tables`. table_position Integer position table notebook entry list.  See `list_entry_tables`. return_table_name bool Determines name table notebook  entry included output. `TRUE` selected, table name added new column data frame. `FALSE`, table name ignored.","code":""},{"path":"https://benchling-r.info/reference/get_entry_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read unstructured table in a notebook entry — get_entry_table","text":"Data frame representing unstructured table notebook entry.","code":""},{"path":"https://benchling-r.info/reference/get_entry_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read unstructured table in a notebook entry — get_entry_table","text":"","code":"if (FALSE) { client <- benchlingr::connect_sdk(     tenant=\"https://hemoshear-dev.benchling.com\",     api_key = Sys.getenv(\"BENCHLING_DEV_API_KEY\")) entry <- client$entries$get_entry_by_id(\"etr_T3WZTyAe\")  table_indices <- benchlingr:::list_entry_tables(entry) print(table_indices) a_table <- get_entry_table(entry, day=1, table_position=2) }"},{"path":"https://benchling-r.info/reference/get_entry_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all unstructured tables in a notebook entry. — get_entry_tables","title":"Read all unstructured tables in a notebook entry. — get_entry_tables","text":"function read unstructured tables notebook entry, returning list data frames.","code":""},{"path":"https://benchling-r.info/reference/get_entry_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all unstructured tables in a notebook entry. — get_entry_tables","text":"","code":"get_entry_tables(   entry,   day = NULL,   table_position = NULL,   table_name = NULL,   return_table_name = TRUE,   verbose = FALSE )"},{"path":"https://benchling-r.info/reference/get_entry_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all unstructured tables in a notebook entry. — get_entry_tables","text":"entry Notebook entry retrieved Benchling Python SDK. retrieve notebook entry, use `connect_sdk` function create Benchling Python SDK facade object, use `entries$get_entry_by_id` method get entry ID. ID entry always start `etr_`. notebook entry metadata Benchling system can retrieved `entry` table data warehouse. day Integer day notebook entry. See `list_entry_tables`. table_position Integer position table notebook entry list.  See `list_entry_tables`. table_name specific table can read name `table_name` argument. `table_name` provided, `day` `table_position` ignored. return_table_name return_return_table_name TRUE, names tables notebook entry returned names output list. verbose verbose, function alert user tables can found days notebook.","code":""},{"path":"https://benchling-r.info/reference/get_entry_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read all unstructured tables in a notebook entry. — get_entry_tables","text":"List data frames representing unstructured tables notebook entry.","code":""},{"path":"https://benchling-r.info/reference/get_entry_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read all unstructured tables in a notebook entry. — get_entry_tables","text":"","code":"if (FALSE) { client <- benchlingr::connect_sdk(     tenant=\"https://hemoshear-dev.benchling.com\",     api_key = Sys.getenv(\"BENCHLING_DEV_API_KEY\")) entry <- client$entries$get_entry_by_id(\"etr_IWLMFYhR\")  entry <- client$entries$get_entry_by_id(\"etr_T3WZTyAe\") tables <- get_entry_tables(entry, table_name='Experimental Conditions') entry <- client$entries$get_entry_by_id(\"etr_aTa6eDWA\") tables <- get_entry_tables(entry, table_name=c(\"TableA\", \"TableB\")) }"},{"path":"https://benchling-r.info/reference/get_plate_diagrams.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and parse plate diagrams in a notebook entry — get_plate_diagrams","title":"Find and parse plate diagrams in a notebook entry — get_plate_diagrams","text":"Benchling users can add special unstructured tables notebook entrys called \"plate diagrams\" conveying information contents physical plates. `read_plate_layouts` function extract  plate diagrams data frames processing R.","code":""},{"path":"https://benchling-r.info/reference/get_plate_diagrams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and parse plate diagrams in a notebook entry — get_plate_diagrams","text":"","code":"get_plate_diagrams(entry, plate_dim = NULL)"},{"path":"https://benchling-r.info/reference/get_plate_diagrams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and parse plate diagrams in a notebook entry — get_plate_diagrams","text":"entry Notebook entry retrieved `entries$get_entry_by_id` method Benchling Python SDK facade object created `benchling::connect_sdk`. plate_dim numeric vector length 1 describes number wells plates read. plate sizes must one following: 6, 12, 24, 48, 96, 384, 1536. default, `plate_dim` `NULL`  function return plates sizes supported Benchling.","code":""},{"path":"https://benchling-r.info/reference/get_plate_diagrams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and parse plate diagrams in a notebook entry — get_plate_diagrams","text":"List data frames representing plate diagrams present notebook entry.","code":""},{"path":"https://benchling-r.info/reference/get_plate_diagrams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and parse plate diagrams in a notebook entry — get_plate_diagrams","text":"","code":"if (FALSE) { client <- connect_sdk(tenant=\"https://hemoshear-dev.benchling.com\",                             api_key=Sys.getenv(\"BENCHLING_DEV_API_KEY\")) entry <- client$entries$get_entry_by_id(\"etr_f1bpDIes\") plate_diagrams <- get_plate_diagrams(entry) }"},{"path":"https://benchling-r.info/reference/get_project_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Benchling project metadata — get_project_ids","title":"Get Benchling project metadata — get_project_ids","text":"Get Benchling project metadata","code":""},{"path":"https://benchling-r.info/reference/get_project_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Benchling project metadata — get_project_ids","text":"","code":"get_project_ids(conn)"},{"path":"https://benchling-r.info/reference/get_project_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Benchling project metadata — get_project_ids","text":"conn Database connection opened `connect_warehouse`.","code":""},{"path":"https://benchling-r.info/reference/get_project_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Benchling project metadata — get_project_ids","text":"data.frame `id` `name` attributes Benchling projects.","code":""},{"path":"https://benchling-r.info/reference/get_schema_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a direct API Call to Benchling Schema endpoints without benchling-sdk client. — get_schema_fields","title":"Makes a direct API Call to Benchling Schema endpoints without benchling-sdk client. — get_schema_fields","text":"Makes direct API Call Benchling Schema endpoints without benchling-sdk client.","code":""},{"path":"https://benchling-r.info/reference/get_schema_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a direct API Call to Benchling Schema endpoints without benchling-sdk client. — get_schema_fields","text":"","code":"get_schema_fields(   schema_id,   schema_type,   tenant = Sys.getenv(\"BENCHLING_TENANT\"),   api_key = Sys.getenv(\"BENCHLING_API_KEY\") )"},{"path":"https://benchling-r.info/reference/get_schema_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a direct API Call to Benchling Schema endpoints without benchling-sdk client. — get_schema_fields","text":"schema_id provided schema id schema_type schema type name shown benchling API endpoints  without `-schemas` ending. See https://benchling.com/api/reference#/Schemas. tenant tenant name form \"https://-organization.benchling.com\". Default value `BENCHLING_TENANT` environment variable. api_key API key. Default value `BENCHLING_API_KEY` environment variable.","code":""},{"path":"https://benchling-r.info/reference/get_schema_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a direct API Call to Benchling Schema endpoints without benchling-sdk client. — get_schema_fields","text":"","code":"if (FALSE) { schema_id <- \"assaysch_nIw4yAq8\" schema_type <- \"assay-result\" }"},{"path":"https://benchling-r.info/reference/is_schema_in_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"`schema` column appears every data warehouse table. function stops function execution `schema` data frame.","code":""},{"path":"https://benchling-r.info/reference/is_schema_in_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"","code":"is_schema_in_dataframe(df)"},{"path":"https://benchling-r.info/reference/is_schema_in_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"df data.frame table data warehouse.","code":""},{"path":"https://benchling-r.info/reference/is_schema_in_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"Used side effect .","code":""},{"path":"https://benchling-r.info/reference/list_entity_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"List names indices entity columns data frame corresponding warehouse table.","code":""},{"path":"https://benchling-r.info/reference/list_entity_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"","code":"list_entity_columns(conn, df)"},{"path":"https://benchling-r.info/reference/list_entity_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"conn Database connection opened `connect_warehouse` df Data frame entity columns","code":""},{"path":"https://benchling-r.info/reference/list_entity_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"Vector names names entity columns data frame values corresponding indices.","code":""},{"path":"https://benchling-r.info/reference/list_entity_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\") list_entity_columns(conn, res) DBI::dbDisconnect(conn) }"},{"path":"https://benchling-r.info/reference/list_entry_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Find unstructured tables (not registry, results, or look-up) in a notebook entry. — list_entry_tables","title":"Find unstructured tables (not registry, results, or look-up) in a notebook entry. — list_entry_tables","text":"function returns locations unstructured tables notebook entry. show user registration, results, look-tables might  located notebook entry, information tables must retrieved API endpoints / data warehouse tables.","code":""},{"path":"https://benchling-r.info/reference/list_entry_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find unstructured tables (not registry, results, or look-up) in a notebook entry. — list_entry_tables","text":"","code":"list_entry_tables(entry, min_rows = NULL)"},{"path":"https://benchling-r.info/reference/list_entry_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find unstructured tables (not registry, results, or look-up) in a notebook entry. — list_entry_tables","text":"entry Notebook entry retrieved `entries$get_entry_by_id` method Benchling Python SDK facade object created `benchling::connect_sdk`. min_rows Keep tables number rows .","code":""},{"path":"https://benchling-r.info/reference/list_entry_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find unstructured tables (not registry, results, or look-up) in a notebook entry. — list_entry_tables","text":"List names days elements indices `notes` attribute    correspond tables entry.","code":""},{"path":"https://benchling-r.info/reference/list_entry_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find unstructured tables (not registry, results, or look-up) in a notebook entry. — list_entry_tables","text":"","code":"if (FALSE) { # Initialize a Benchling Python SDK facade object. client <- benchlingr::connect_sdk(     tenant=\"https://hemoshear-dev.benchling.com\",     api_key = Sys.getenv(\"BENCHLING_DEV_API_KEY\")) # Retrieve notebook entries with the `entries$get_entry_by_id` method. entry <- client$entries$get_entry_by_id(\"etr_T3WZTyAe\") # Find the locations of the unstructured tables in the notebook entry. benchlingr::list_entry_tables(entry) }"},{"path":"https://benchling-r.info/reference/list_multiselect_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"List multi-select columns data frame retrieved data  warehouse","code":""},{"path":"https://benchling-r.info/reference/list_multiselect_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"","code":"list_multiselect_columns(conn, df)"},{"path":"https://benchling-r.info/reference/list_multiselect_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"conn Database connection opened `connect_warehouse`. df Data frame retrieved Benchling data warehouse one  multi-select columns. data frame must also column called `schema`,  indicates schema name warehouse table.  One can use `DBI::dbReadTable` `DBI::dbGetQuery` retrieve tables  data warehouse.","code":""},{"path":"https://benchling-r.info/reference/list_multiselect_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"Character vector names names multi-select columns data frame values positions multi-select columns data frame.","code":""},{"path":"https://benchling-r.info/reference/list_multiselect_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\") list_multiselect_columns(conn, res) }"},{"path":"https://benchling-r.info/reference/list_schemas_in_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"List the schemas for the results and registration tables contained within\na notebook entry — list_schemas_in_entry","title":"List the schemas for the results and registration tables contained within\na notebook entry — list_schemas_in_entry","text":"List schemas results registration tables contained within notebook entry","code":""},{"path":"https://benchling-r.info/reference/list_schemas_in_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the schemas for the results and registration tables contained within\na notebook entry — list_schemas_in_entry","text":"","code":"list_schemas_in_entry(client, conn, entry)"},{"path":"https://benchling-r.info/reference/list_schemas_in_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the schemas for the results and registration tables contained within\na notebook entry — list_schemas_in_entry","text":"client Benchling API client created `connect_sdk`. conn Benchling data warehouse connection created `connect_warehouse`. entry Notebook entry retrieved `entries$get_entry_by_id` method Benchling Python SDK facade object created `benchlingr::connect_sdk`.","code":""},{"path":"https://benchling-r.info/reference/list_schemas_in_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the schemas for the results and registration tables contained within\na notebook entry — list_schemas_in_entry","text":"data frame includes names identifiers results registration schemas contained within notebook entry.","code":""},{"path":"https://benchling-r.info/reference/list_schemas_in_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the schemas for the results and registration tables contained within\na notebook entry — list_schemas_in_entry","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",                           username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),                          password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) client <- connect_sdk(tenant=\"https://hemoshear-dev.benchling.com\",                             api_key=Sys.getenv(\"BENCHLING_DEV_API_KEY\")) nb_entry <- client$entries$get_entry_by_id(\"etr_MWQ7M7Pz\") list_schemas_in_entry(client, conn, nb_entry) }"},{"path":"https://benchling-r.info/reference/replace_entity_id_with_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"Values entity column appear Benchling identifiers pulled data warehouse. function converts identifiers  human-readable names. example, custom entity value identifier looks like \"bfi_10dgdgFJx\", name might \"cell line\".","code":""},{"path":"https://benchling-r.info/reference/replace_entity_id_with_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"","code":"replace_entity_id_with_name(conn, df)"},{"path":"https://benchling-r.info/reference/replace_entity_id_with_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"conn Database connection opened `connect_warehouse`. df Data frame retrieved Benchling data warehouse one  entity link columns. data frame must also column called `schema`,  indicates schema name warehouse table.  One can use `DBI::dbReadTable` `DBI::dbGetQuery` retrieve tables  data warehouse.","code":""},{"path":"https://benchling-r.info/reference/replace_entity_id_with_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"data.frame Benchling entity identifiers replaced  names entities.","code":""},{"path":"https://benchling-r.info/reference/replace_entity_id_with_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"","code":"if (FALSE) { conn <- connect_warehouse(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\"))  df <- DBI::dbGetQuery(conn, \"SELECT * FROM  simple_plate_analyte_mapping_with_two_analytes$raw WHERE  entry_id$ = 'etr_lnZDpRVI'\") res <- replace_entity_id_with_name(conn, df) DBI::dbDisconnect(conn) }"},{"path":"https://benchling-r.info/reference/unarchive_assay_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a direct API Call to Benchling Assay Result Unarchive endpoint — unarchive_assay_results","title":"Makes a direct API Call to Benchling Assay Result Unarchive endpoint — unarchive_assay_results","text":"https://benchling.com/api/reference#/Assay","code":""},{"path":"https://benchling-r.info/reference/unarchive_assay_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a direct API Call to Benchling Assay Result Unarchive endpoint — unarchive_assay_results","text":"","code":"unarchive_assay_results(   tenant = Sys.getenv(\"BENCHLING_TENANT\"),   api_key = Sys.getenv(\"BENCHLING_API_KEY\"),   assay_result_ids = NULL )"},{"path":"https://benchling-r.info/reference/unarchive_assay_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a direct API Call to Benchling Assay Result Unarchive endpoint — unarchive_assay_results","text":"tenant tenant name api_key api key assay_result_ids vector type assay result ids. function supports archiving multiple items one function call","code":""},{"path":"https://benchling-r.info/reference/unarchive_assay_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a direct API Call to Benchling Assay Result Unarchive endpoint — unarchive_assay_results","text":"assay_result_ids","code":""},{"path":"https://benchling-r.info/reference/unarchive_assay_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a direct API Call to Benchling Assay Result Unarchive endpoint — unarchive_assay_results","text":"","code":"if (FALSE) { assay_result_ids <- assay_result_ids=c(\"908df834-220e-4b59-975b-c21bbbb8191a\") }"},{"path":"https://benchling-r.info/reference/verify_schema_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"compares schema fields with dataframe colnames and verifies — verify_schema_fields","title":"compares schema fields with dataframe colnames and verifies — verify_schema_fields","text":"compares schema fields dataframe colnames verifies","code":""},{"path":"https://benchling-r.info/reference/verify_schema_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compares schema fields with dataframe colnames and verifies — verify_schema_fields","text":"","code":"verify_schema_fields(   schema_id,   schema_type,   df,   strict_check = FALSE,   tenant = Sys.getenv(\"BENCHLING_TENANT\"),   api_key = Sys.getenv(\"BENCHLING_API_KEY\") )"},{"path":"https://benchling-r.info/reference/verify_schema_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compares schema fields with dataframe colnames and verifies — verify_schema_fields","text":"schema_id provided schema id schema_type schema type name shown benhcling API endpoints without `-schemas` ending. df provided dataframe strict_check optional arguement. set TRUE, function looks every schema field names colnames. tenant tenant name. missing, reading sys.env api_key API key. Default value `BENCHLING_API_KEY` environment variable.","code":""},{"path":"https://benchling-r.info/reference/verify_schema_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compares schema fields with dataframe colnames and verifies — verify_schema_fields","text":"boolean field","code":""},{"path":[]},{"path":"https://benchling-r.info/news/index.html","id":"benchlingr-010","dir":"Changelog","previous_headings":"","what":"benchlingr 0.1.0","title":"benchlingr 0.1.0","text":"Extract unstructured tables notebook entries list schemas structured tables exist within notebook entries. Streamline data warehouse interactions custom results entity schemas. Access Python SDK via R single function call. Upload assay results.","code":""}]
