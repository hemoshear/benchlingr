[{"path":"https://upgraded-succotash-8df2b926.pages.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 benchlingr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"benchlingr","text":"Install benchlingr package GitHub using remotes package. benchlingr package also requires Python. recommend using Anaconda distribution","code":"remotes::install_github(\"hemoshear/benchlingr\", ref='main', auth_token={{secret.AUTH_TOKEN_GITHUB}})"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"benchlingr","text":"benchlingr package primarily utilizes RESTFUL API service Postgres database components Benchling developer platform. order use components Benchling platform, one must acquire API keys database credentials Benchling interface. section focus make credentials available benchlingr package.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"api","dir":"Articles","previous_headings":"Configuration","what":"API","title":"benchlingr","text":"order access Benchling API service one’s Benchling tenant, one must obtain API key Benchling interface. Follow instructions official documentation obtain API key. obtaining API key, recommended define variable .Renviron called BENCHLING_API_KEY make key accessible benchlingr package default function arguments.","code":"# ~/.Renviron  # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"data-warehouse","dir":"Articles","previous_headings":"Configuration","what":"Data warehouse","title":"benchlingr","text":"Follow instructions official documentation obtain username password data warehouse Benchling tenant. obtaining username password, recommended one define variable .Renviron called BENCHLING_WAREHOUSE_KEY BENCHLING_WAREHOUSE_PASSWORD make credentials available benchlingr default function arguments.","code":"# ~/.Renviron # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx  # Benchling warehouse credentials BENCHLING_WAREHOUSE_USERNAME=yyyyyyyyyyy BENCHLING_WAREHOUSE_PASSWORD=xxxxxxxxxxx"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"python-sdk","dir":"Articles","previous_headings":"Configuration","what":"Python SDK","title":"benchlingr","text":"benchlingr R package uses official Benchling Python SDK access Benchling API service. Python dependencies installed automatically miniconda environment. One can also create new conda virtualenv environments config_sdk_env helper function, simply creates environment installs benchling-sdk package . See official Anaconda documentation instructions install Anaconda machine.","code":"config_sdk_env()"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"fundamentals-of-the-benchling-data-warehouse","dir":"Articles","previous_headings":"","what":"Fundamentals of the Benchling Data Warehouse","title":"benchlingr","text":"Benchling data warehouse read-, Postgres database can used easily extract data pertaining items inventory, entities, results, noteboook entries using SQL queries. moving , recommend user reads official Benchling documentation data warehouse. rest section assume user basic understanding Benchling’s data warehouse, discuss practical considerations working database, including use benchlingr tools streamline interactions database. connect data warehouse tenant benchlingr package, use warehouse_connect function. default, function looks two environment variables .Renviron: BENCHLING_WAREHOUSE_USERNAME BENCHLING_WAREHOUSE_PASSWORD. function working , please see instructions configuration official documentation. able connect database using instructions official tutorial, warehouse_connect function work properly, assuming aforementioned environment variables set. warehouse_connect function return Postgres SQL database connection object (PqConnection), can used make queries database using DBI package R. verify connected database Benchling tenant, one can use dbIsValid display information connection . DBI::dbDisconnect function closes warehouse connection.","code":"conn <- warehouse_connect(tenant = \"hemoshear-dev\",                           username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),                           password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) class(conn) #> [1] \"PqConnection\" #> attr(,\"package\") #> [1] \"RPostgres\" DBI::dbIsValid(conn) #> [1] TRUE DBI::dbDisconnect(conn)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"raw-tables-and-postgres-views","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"“Raw” tables and Postgres views","title":"benchlingr","text":"One can use DBI::dbListTables function see tables database. ’ll notice every “table” database actually comprised two tables: unedited version data, referred “raw” table, cleaned Postgres view data. example, analyte table Postgres view custom entity schema defined, analyte$raw table unedited table. general, Postgres views convenient work , since raw tables contain many Benchling identifiers intended internal use. experience, however, use cases raw tables accessed instead Postgres views. example, one needs extract assay results submitted notebook entries approved, one need use “raw” tables , since Postgres views contain assay results unreviewed notebooks. Refer official Benchling documentation information differences raw tables Postgres views.","code":"conn <- warehouse_connect(tenant = \"hemoshear-dev\",                           username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),                           password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) DBI::dbListTables(conn)[1:6] #> [1] \"analyte\"                 \"analyte$raw\"             #> [3] \"assay_result_schema\"     \"assay_result_schema$raw\" #> [5] \"author\"                  \"author$raw\""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"retrieving-data-from-the-warehouse","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Retrieving data from the warehouse","title":"benchlingr","text":"retrieve data table data warehouse, one can use DBI::dbGetQuery function. data warehouse consists several types tables, different set base columns. example, code one use retrieve notebook entries data warehouse. Take moment look results query, well descriptions columns official Benchling documentation. ","code":"DBI::dbGetQuery(conn, \"SELECT * FROM entry\") %>%   tail() #>             id    source_id archived$ archive_purpose$   creator_id #> 1 etr_f1bpDIes src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 2 etr_T3WZTyAe src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 3 etr_JYUlMiIs src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 4 etr_lnZDpRVI src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #> 5 etr_MWQ7M7Pz src_ZRvTYOgM     FALSE             <NA> ent_Ec76qX9f #>            created_at         modified_at                      name  display_id #> 1 2022-09-16 15:56:02 2022-09-19 12:52:28       read_plate_diagrams EXP22000001 #> 2 2022-09-16 19:16:42 2022-09-19 12:55:27         read_entry_tables EXP22000002 #> 3 2022-09-20 14:03:59 2022-09-20 18:26:58            download_blobs EXP22000004 #> 4 2022-09-22 14:55:52 2022-09-22 14:57:04          get_entity_table EXP22000005 #> 5 2022-09-20 13:01:10 2022-09-23 14:47:27 expand_multiselect_column EXP22000003 #>      folder_id workflow_id schema_id entry_template_id review_status #> 1 lib_F5H5Syfw        <NA>      <NA>              <NA>          <NA> #> 2 lib_F5H5Syfw        <NA>      <NA>              <NA>          <NA> #> 3 lib_F5H5Syfw        <NA>      <NA>              <NA>          <NA> #> 4 lib_F5H5Syfw        <NA>      <NA>              <NA>          <NA> #> 5 lib_F5H5Syfw        <NA>      <NA>              <NA>          <NA> #>   review_requested_at review_status_changed_at review_lifecycle #> 1                <NA>                     <NA>             <NA> #> 2                <NA>                     <NA>             <NA> #> 3                <NA>                     <NA>             <NA> #> 4                <NA>                     <NA>             <NA> #> 5                <NA>                     <NA>             <NA> #>   review_lifecycle_type #> 1                  <NA> #> 2                  <NA> #> 3                  <NA> #> 4                  <NA> #> 5                  <NA> #>                                                                                                                                                url #> 1       https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_f1bpDIes-read_plate_diagrams/edit #> 2         https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_T3WZTyAe-read_entry_tables/edit #> 3            https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_JYUlMiIs-download_blobs/edit #> 4          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_lnZDpRVI-get_entity_table/edit #> 5 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_F5H5Syfw-benchlingr-development/etr_MWQ7M7Pz-expand_multiselect_column/edit"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"custom-entities","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse > Retrieving data from the warehouse","what":"Custom entities","title":"benchlingr","text":"data warehouse tenant come pre-loaded tables relevant entity schemas universal Benchling system. example, entry schema available every Benchling installation ELN functionality. tables created new schemas defined Benchling. custom entity result schema defined, Benchling creates new set tables database: one Postgres view one raw data. example, defined custom entity schema representing analytes.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"custom-analyte-entity","dir":"Articles","previous_headings":"","what":"benchlingr","title":"benchlingr","text":"defined “Analyte” custom entity schema, Benchling created table data warehouse called analyte. analyte entities created can retrieved DBI::dbGetQuery. Benchling also created “raw” table custom analyte schema. schema, id, name$ important fields present every entity warehouse table. schema field system name schema, necessary critical functionality benchlingr. id field Benchling identifier entity. identifier custom entity always start bfi_, built-Benchling entities specific prefixes identifiers. example, container built-Benchling entity schema identifiers containers start con_. Finally, name$ name entity. Typically name human-friendly, several ways entity can named depending schema configured. addition schema, id, name$, many columns present every entity table. Read columns Benchling documentation. Finally, warehouse table custom entity contain column every user-defined field entity. “analyte” example, analyte entity can precursor ion m/z product ion m/z, representing floats “decimals” using Benchling terminology.","code":"DBI::dbGetQuery(conn, \"SELECT schema,id,name$,precursor_ion_mz,product_ion_mz FROM analyte\") %>%   head() #>    schema           id                  name$ precursor_ion_mz product_ion_mz #> 1 analyte bfi_9fKcrORv 12C-Methylmalonic Acid            117.0           73.1 #> 2 analyte bfi_KsLU5uWV          12C-Uric Acid            166.9          123.9 #> 3 analyte bfi_VVamxrKQ 13C-Methylmalonic Acid            121.3           76.4 #> 4 analyte bfi_Q13AlXkf          13C-Uric Acid            171.0          126.0 DBI::dbGetQuery(conn, \"SELECT id,schema,precursor_ion_m_z,product_ion_m_z,assay FROM analyte$raw\") %>%   head()"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"results","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Results","title":"benchlingr","text":"Similar entities, every results schema Benchling represented table data warehouse. several differences representations results entities worth mentioning. First, results names, entities . Second, results entities identifiers, entity identifiers tend useful, since many operations involve finding results entities linked , necessarily finding results directly via identifier. Third, entities registered, become available Postgres view data warehouse shortly (Benchling always short delay data exported warehouse). results submitted, available Postgres view data warehouse, available “raw” table. Results become available Postgres view notebook entry reviewed. reason, “raw” tables results typically need accessed frequently “raw” tables entities, especially notebook entries always reviewed data contained within must accessed. Finally, results linked particular notebook entries data warehouse, entities . words, warehouse table results schema column notebook entry identifier, entity table column notebook entry identifier. Shown screenshot results table notebook entry schema called “Simple Plate Analyte Mapping”. result schema two fields: “Plate” “Analytes”. “Plate” field integer type serves loose identifier assay plate, “Analytes” field custom entity type “Analyte” discussed previous section. “Analytes” field can also take multiple values. Example results table notebook two fields: “Plate” “Analytes”. “Plate” field integer type “Analytes” field custom entity type called “Analyte” multiple values enabled. plate 1 corresponds Methylmalonic Acid isotopes plate 2 corresponds Uric Acid isotopes. extract data warehouse, use DBI::dbGetQuery function. case, use identifier notebook entry extract results simple_plate_analyte_mapping schema. ’m looking “raw” table notebook entry table reviewed yet. Many columns “raw” tables used context, _pkey _sync_key, internal identifiers Benchling. important also extract $archived$ column see whether results archived, well schema column may use benchlingr tools pull information entity fields results.","code":"DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw WHERE entry_id$ = 'etr_MWQ7M7Pz'\") #>                                     id                                _pkey #> 1 b30e02a0-6084-419d-a552-d6419aa564e0 31a79378-e82e-4a25-837d-65f4619770c9 #> 2 48d937f3-4035-494d-b63a-b658c91aadbd ad4344c3-4b58-476f-9fc2-caf043bec69a #>            _sync_key    source_id                       schema #> 1 assay_result_22897 src_ZRvTYOgM simple_plate_analyte_mapping #> 2 assay_result_22898 src_ZRvTYOgM simple_plate_analyte_mapping #>           created_at$  creator_id$    entry_id$ archived$ archive_purpose$ #> 1 2022-09-20 13:08:21 ent_Ec76qX9f etr_MWQ7M7Pz     FALSE             <NA> #> 2 2022-09-20 13:08:21 ent_Ec76qX9f etr_MWQ7M7Pz     FALSE             <NA> #>   custom$ validation_status$ validation_comment$ run_id$ #> 1      {}              VALID                <NA>    <NA> #> 2      {}              VALID                <NA>    <NA> #>                                                                                                                                                                                                   field_validation$ #> 1 {\"file\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"plate\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"analytes\": {\"validation_status\": \"VALID\", \"validation_comment\": null}} #> 2 {\"file\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"plate\": {\"validation_status\": \"VALID\", \"validation_comment\": null}, \"analytes\": {\"validation_status\": \"VALID\", \"validation_comment\": null}} #>   plate                         analytes file #> 1     1 [\"bfi_9fKcrORv\", \"bfi_VVamxrKQ\"] <NA> #> 2     2 [\"bfi_KsLU5uWV\", \"bfi_Q13AlXkf\"] <NA> df <- DBI::dbGetQuery(conn, \"SELECT schema,archived$,plate,analytes FROM simple_plate_analyte_mapping$raw WHERE entry_id$ = 'etr_MWQ7M7Pz'\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"multi-select-columns","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Multi-select columns","title":"benchlingr","text":"Fields entities results can configured multiple values can submitted. “multi-select” columns represented JSON objects data warehouse. unpack values columns create new rows columns data frame, use expand_multiselect_column function. unpack value original row copied value multi-select column, use shape=\"long\" argument. unpack value new columns original row, use shape=\"wide\" argument. default, new columns named appending number original column name (\\((1, 2, ..., n)\\), n maximum number elements appear value within multi-select field). using \"wide\" argument, original column pq_jsonb type stored data frame.","code":"expand_multiselect_column(conn, df, column=\"analytes\", shape=\"long\") #>                         schema archived$ plate     analytes #> 1 simple_plate_analyte_mapping     FALSE     1 bfi_9fKcrORv #> 2 simple_plate_analyte_mapping     FALSE     1 bfi_VVamxrKQ #> 3 simple_plate_analyte_mapping     FALSE     2 bfi_KsLU5uWV #> 4 simple_plate_analyte_mapping     FALSE     2 bfi_Q13AlXkf expand_multiselect_column(conn, df, column=\"analytes\", shape=\"wide\") #> New names: #> • `` -> `...1` #> • `` -> `...2` #>                         schema archived$ plate                         analytes #> 1 simple_plate_analyte_mapping     FALSE     1 [\"bfi_9fKcrORv\", \"bfi_VVamxrKQ\"] #> 2 simple_plate_analyte_mapping     FALSE     2 [\"bfi_KsLU5uWV\", \"bfi_Q13AlXkf\"] #>      analytes1    analytes2 #> 1 bfi_9fKcrORv bfi_VVamxrKQ #> 2 bfi_KsLU5uWV bfi_Q13AlXkf"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"entities","dir":"Articles","previous_headings":"Fundamentals of the Benchling Data Warehouse","what":"Entities","title":"benchlingr","text":"data warehouse table, entity links represented identifiers. example , “analytes” custom-entity column, identifiers start “bfi_”. benchlingr package, can easily pull additional information entities table without writing SQL. get_entity_table function take warehouse table input return information entities contained within table. example, results table four distinct “analyte” entities appear. get_entity_table look correct warehouse table (analyte) rows correspond identifiers data. function also takes argument called columns allows one choose entity columns pull information . absence columns argument, function try pull information entity columns table. replace_entity_id_with_name function simply replace Benchling identifiers names entities. function work properly data frames multi-select, entity column expanded using shape='wide' argument expand_multiselect_column function. need replace identifiers multi-select, entity column, best use replace_entity_id_with_name function calling expand_multiselect_column.","code":"res <- expand_multiselect_column(conn, df, column=\"analytes\", shape=\"long\") res #>                         schema archived$ plate     analytes #> 1 simple_plate_analyte_mapping     FALSE     1 bfi_9fKcrORv #> 2 simple_plate_analyte_mapping     FALSE     1 bfi_VVamxrKQ #> 3 simple_plate_analyte_mapping     FALSE     2 bfi_KsLU5uWV #> 4 simple_plate_analyte_mapping     FALSE     2 bfi_Q13AlXkf get_entity_table(conn, res, columns = \"analytes\") #> $analytes #>             id    source_id  schema archived$ archive_purpose$  creator_id$ #> 1 bfi_9fKcrORv src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 2 bfi_KsLU5uWV src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 3 bfi_VVamxrKQ src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 4 bfi_Q13AlXkf src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #>           created_at$        modified_at$                  name$ #> 1 2022-09-20 13:07:45 2022-09-20 13:07:45 12C-Methylmalonic Acid #> 2 2022-09-20 13:07:45 2022-09-20 13:07:45          12C-Uric Acid #> 3 2022-09-20 13:07:45 2022-09-20 13:07:45 13C-Methylmalonic Acid #> 4 2022-09-20 13:07:45 2022-09-20 13:07:45          13C-Uric Acid #>   file_registry_id$  schema_id$   folder_id$  project_id$ #> 1              A001 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 2              A002 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 3              A003 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 4              A004 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #>                                                                                                                              url$ #> 1 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_9fKcrORv-12c-methylmalonic-acid/edit #> 2          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_KsLU5uWV-12c-uric-acid/edit #> 3 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_VVamxrKQ-13c-methylmalonic-acid/edit #> 4          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_Q13AlXkf-13c-uric-acid/edit #>   validation_status$         type$ is_registered$ precursor_ion_mz #> 1             PASSED custom_entity           TRUE            117.0 #> 2             PASSED custom_entity           TRUE            166.9 #> 3             PASSED custom_entity           TRUE            121.3 #> 4             PASSED custom_entity           TRUE            171.0 #>   product_ion_mz #> 1           73.1 #> 2          123.9 #> 3           76.4 #> 4          126.0 analytes <- replace_entity_id_with_name(conn, res) analytes #>                         schema archived$ plate               analytes #> 1 simple_plate_analyte_mapping     FALSE     1 12C-Methylmalonic Acid #> 2 simple_plate_analyte_mapping     FALSE     1 13C-Methylmalonic Acid #> 3 simple_plate_analyte_mapping     FALSE     2          12C-Uric Acid #> 4 simple_plate_analyte_mapping     FALSE     2          13C-Uric Acid head(df) #>                         schema archived$ plate                         analytes #> 1 simple_plate_analyte_mapping     FALSE     1 [\"bfi_9fKcrORv\", \"bfi_VVamxrKQ\"] #> 2 simple_plate_analyte_mapping     FALSE     2 [\"bfi_KsLU5uWV\", \"bfi_Q13AlXkf\"] res <- replace_entity_id_with_name(conn, df) res <- expand_multiselect_column(conn, res, column=\"analytes\", shape=\"wide\") #> New names: #> • `` -> `...1` #> • `` -> `...2` head(res) #>                         schema archived$ plate #> 1 simple_plate_analyte_mapping     FALSE     1 #> 2 simple_plate_analyte_mapping     FALSE     2 #>                                               analytes              analytes1 #> 1 [\"12C-Methylmalonic Acid\", \"13C-Methylmalonic Acid\"] 12C-Methylmalonic Acid #> 2                   [\"12C-Uric Acid\", \"13C-Uric Acid\"]          12C-Uric Acid #>                analytes2 #> 1 13C-Methylmalonic Acid #> 2          13C-Uric Acid"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"accessing-the-benchling-api-via-the-python-sdk-in-r-","dir":"Articles","previous_headings":"","what":"Accessing the Benchling API via the Python SDK in R.","title":"benchlingr","text":"create interface Benchling API, use benchling_api_auth function set BENCHLING_API_KEY environment variable described Python SDK configuration section. benchling_api_auth function returns facade object Benchling Python SDK facilitates interaction API. attributes facade object services Benchling API documentation. service multiple methods available.","code":"client <- benchling_api_auth(tenant=\"https://hemoshear-dev.benchling.com\",                              api_key=Sys.getenv(\"BENCHLING_DEV_API_KEY\")) head(names(client)) #> [1] \"aa_sequences\"  \"api\"           \"apps\"          \"assay_results\" #> [5] \"assay_runs\"    \"blobs\" names(client$entries) #>  [1] \"archive_entries\"          \"bulk_get_entries\"         #>  [3] \"client\"                   \"create_entry\"             #>  [5] \"get_entry_by_id\"          \"get_entry_template_by_id\" #>  [7] \"get_external_file\"        \"list_entries\"             #>  [9] \"list_entry_templates\"     \"retry_strategy\"           #> [11] \"unarchive_entries\"        \"update_entry\""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"notebook-entries","dir":"Articles","previous_headings":"","what":"Notebook Entries","title":"benchlingr","text":"Notebook entries can found entry table data warehouse. Note, table contains notebook entry metadata, content entry . content notebook entries (aside results entities), must retrieved API. retrieve notebook entry, use entries$get_entry_by_id method. method takes ID entry argument, starts etr_.","code":"conn <- warehouse_connect(\"hemoshear-dev\",                           username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),                           password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) DBI::dbGetQuery(conn, \"SELECT id,display_id,schema_id,entry_template_id,review_status FROM entry\") %>%   head() #>             id  display_id schema_id entry_template_id review_status #> 1 etr_f1bpDIes EXP22000001      <NA>              <NA>          <NA> #> 2 etr_T3WZTyAe EXP22000002      <NA>              <NA>          <NA> #> 3 etr_JYUlMiIs EXP22000004      <NA>              <NA>          <NA> #> 4 etr_lnZDpRVI EXP22000005      <NA>              <NA>          <NA> #> 5 etr_MWQ7M7Pz EXP22000003      <NA>              <NA>          <NA> entry <- client$entries$get_entry_by_id(\"etr_T3WZTyAe\") class(entry) #> [1] \"benchling_api_client.v2.stable.models.entry.Entry\" #> [2] \"python.builtin.object\""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"reading-unstructured-tables-","dir":"Articles","previous_headings":"Notebook Entries","what":"Reading unstructured tables.","title":"benchlingr","text":"Benchling users can record information unstructured tables within notebook entries.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"example-of-an-unstructured-table-in-a-benchling-notebook-entry","dir":"Articles","previous_headings":"","what":"benchlingr","title":"benchlingr","text":"read_entry_tables function extracts unstructured tables notebook entry, returns list data frames processing R.","code":"tables <- read_entry_tables(entry) tables[[1]] #>   sample_id treatment #> 1         1    Drug A #> 2         2    Drug A #> 3         3    Drug A #> 4         4   Control #> 5         5   Control #> 6         6   Control"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"reading-plate-diagrams-","dir":"Articles","previous_headings":"Notebook Entries","what":"Reading plate diagrams.","title":"benchlingr","text":"addition unstructured tables, Benchling users can create “plate diagrams” describe contents physical plates. plate diagram tables can certain sizes (2x3, 3x4, 4x6, 6x8, 8x12, 16x24, 32x48), column names must integers, row names must letters. Plate diagrams Benchling notebook entry. useful convert tables long form processing R. , one can start read_plate_diagrams function instead read_entry_tables function. read_plate_diagrams extract plate diagrams notebook entry convert output data frames long form tables three columns: row, column, content. row letter row plate, column integer column plate, content text appears cell table. names list names tables notebook entry.","code":"entry <- client$entries$get_entry_by_id(\"etr_f1bpDIes\") diagrams <- read_plate_diagrams(entry) str(diagrams) #> List of 2 #>  $ Well1:'data.frame':   384 obs. of  3 variables: #>   ..$ row    : chr [1:384] \"A\" \"B\" \"C\" \"D\" ... #>   ..$ column : chr [1:384] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ content: chr [1:384] \"1\" \"2\" \"3\" \"4\" ... #>  $ Well2:'data.frame':   96 obs. of  3 variables: #>   ..$ row    : chr [1:96] \"A\" \"B\" \"C\" \"D\" ... #>   ..$ column : chr [1:96] \"1\" \"1\" \"1\" \"1\" ... #>   ..$ content: chr [1:96] \"1\" \"2\" \"3\" \"4\" ... head(diagrams$Well1) #>   row column content #> 1   A      1       1 #> 2   B      1       2 #> 3   C      1       3 #> 4   D      1       4 #> 5   E      1       5 #> 6   F      1       6"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"schemas-within-notebook-entries","dir":"Articles","previous_headings":"Notebook Entries","what":"Schemas within notebook entries","title":"benchlingr","text":"entities results can created tables within notebook entries. data analyst need query specific API endpoint warehouse table find registered entities results, one needs know schema associated entity results table. Benchling user can change name displayed tables notebook entry, always obvious schemas present notebook entry. Furthermore, data extracted warehouse, ’ll need know names warehouse tables query, always inferred schema names alone.","code":"list_schemas_in_entry(\"etr\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/articles/benchlingr.html","id":"downloading-attached-files","dir":"Articles","previous_headings":"","what":"Downloading attached files","title":"benchlingr","text":"Benchling users can attach files results entities, referred blobs backend. results table Benchling notebook entry files attached. schema name example table simple_plate_analyte_mapping, can query table get identifiers file names blobs download. case, use entry identifier filter table results actually care , one filter table various ways (ex. creation time). “blob” consists identifier, URL, name. download_blobs low-level wrapper Python SDK downloads set blobs Benchling specified ID file name. download_blobs_in_warehouse_table function download files attached particular set columns warehouse table. default, try download files blob columns unless specific set passed column argument. files column saved subdirectory within outdir.","code":"d <- DBI::dbGetQuery(conn, \"SELECT plate,analytes,file FROM simple_plate_analyte_mapping$raw                       WHERE entry_id$ = 'etr_JYUlMiIs'\") d #>   plate         analytes #> 1     2 [\"bfi_VVamxrKQ\"] #> 2     1 [\"bfi_9fKcrORv\"] #>                                                                                                                                                                 file #> 1 {\"id\": \"a2ed3ec8-59b9-451a-81eb-c4fb5322858b\", \"url\": \"https://hemoshear-dev.benchling.com/blobs/a2ed3ec8-59b9-451a-81eb-c4fb5322858b\", \"name\": \"Plate2-Data.csv\"} #> 2 {\"id\": \"ff0cca5f-b400-4e42-9df6-9f1badc4b7e2\", \"url\": \"https://hemoshear-dev.benchling.com/blobs/ff0cca5f-b400-4e42-9df6-9f1badc4b7e2\", \"name\": \"Plate1-Data.csv\"} download_blobs(   client,    file_map = list(     \"ff0cca5f-b400-4e42-9df6-9f1badc4b7e2\" = \"Plate1-Data.csv\",     \"a2ed3ec8-59b9-451a-81eb-c4fb5322858b\" = \"Plate2-Data.csv\"),   outdir='data') download_blobs_in_warehouse_table(conn, d, column='file', outdir=\"data\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"E-Mail. Maintainer.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, person, person) (2022). benchlingr: Access 'Benchling' RESTFUL API data warehouse. https://github.com/hemoshear/benchlingr, https://upgraded-succotash-8df2b926.pages.github.io/.","code":"@Manual{,   title = {benchlingr: Access the 'Benchling' RESTFUL API and data warehouse},   author = {{c} and {person} and {person)}},   year = {2022},   note = {https://github.com/hemoshear/benchlingr, https://upgraded-succotash-8df2b926.pages.github.io/}, }"},{"path":[]},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"unofficial-r-interface-to-the-benchling-cloud-rd-laboratory-information-management-system-lims","dir":"","previous_headings":"","what":"Unofficial R Interface to the “Benchling Cloud R&D” Laboratory Information Management System (LIMS).","title":"Access the Benchling RESTFUL API and data warehouse","text":"R package check, build, test Benchling laboratory information management system developer platform comprised Postgres database, application programming interface (API), “Events” system built top AWS EventBridge service, well Python software development kit (SDK). benchlingr R package aims make developer platform accessible data scientists.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access the Benchling RESTFUL API and data warehouse","text":"Install R package directly GitHub using install_github function remotes package. Use install.packages('remotes') install remotes package already see documentation ?remotes::install_github information.","code":"remotes::install_github(\"hemoshear/benchlingr\", ref='main', auth_token={{secret.AUTH_TOKEN_GITHUB}})"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"configuration","dir":"","previous_headings":"","what":"Configuration","title":"Access the Benchling RESTFUL API and data warehouse","text":"benchlingr package primarily utilizes RESTFUL API service Postgres database services Benchling developer platform. order use components Benchling platform, one must acquire API keys database credentials Benchling interface. section focus make credentials available benchlingr package.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"api","dir":"","previous_headings":"Configuration","what":"API","title":"Access the Benchling RESTFUL API and data warehouse","text":"order access Benchling API service one’s Benchling tenant, one must obtain API key Benchling interface. Follow instructions official documentation obtain API key. obtaining API key, recommended define variable .Renviron called BENCHLING_API_KEY make key accessible benchlingr package default function arguments.","code":"# ~/.Renviron  # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"data-warehouse","dir":"","previous_headings":"Configuration","what":"Data warehouse","title":"Access the Benchling RESTFUL API and data warehouse","text":"Follow instructions official documentation obtain username password data warehouse Benchling tenant. obtaining username password, recommended one define variable .Renviron called BENCHLING_WAREHOUSE_KEY BENCHLING_WAREHOUSE_PASSWORD make credentials available benchlingr default settings.","code":"# ~/.Renviron  # Benchling API key BENCHLING_API_KEY=xxxxxxxxxxx  # Benchling warehouse credentials BENCHLING_WAREHOUSE_USERNAME=yyyyyyyyyyy BENCHLING_WAREHOUSE_PASSWORD=xxxxxxxxxxx"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"development-environment","dir":"","previous_headings":"Configuration > Data warehouse","what":"Development environment","title":"Access the Benchling RESTFUL API and data warehouse","text":"use renv package track R dependencies project. list R package versions stored renv.lock file. .Rprofile renv/activate.R files auto-loaders renv uses bootstrap . creating new RStudio project development package, renv install one able use renv::restore install set packages defined renv file.","code":"install.packages('renv') renv::restore()"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Access the Benchling RESTFUL API and data warehouse","text":"Use pkgdown build documentation site, available online near future.","code":"pkgdown::build_site()"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/benchling_api_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Benchling API client that can be used to access the API via R. — benchling_api_auth","title":"Create a Benchling API client that can be used to access the API via R. — benchling_api_auth","text":"Create Benchling API client can used access API via R.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/benchling_api_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Benchling API client that can be used to access the API via R. — benchling_api_auth","text":"","code":"benchling_api_auth(tenant, api_key = Sys.getenv(\"BENCHLING_API_KEY\"))"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/benchling_api_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Benchling API client that can be used to access the API via R. — benchling_api_auth","text":"tenant URL Benchling tenant (character). api_key API key Benchling tenant (character). default value \"BENCHLING_API_KEY\" environment variable `.Renviron` file.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/benchling_api_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Benchling API client that can be used to access the API via R. — benchling_api_auth","text":"Benchling API client object can used accessing  API via R.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/benchling_api_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Benchling API client that can be used to access the API via R. — benchling_api_auth","text":"","code":"if (FALSE) { client <- benchling_api_auth(tenant=\"https://my-company-tenant-name.benchling.com\") }"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/config_sdk_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure environment for accessing API — config_sdk_env","title":"Configure environment for accessing API — config_sdk_env","text":"Helper function create Anaconda environment install Benchling Python SDK (`benchling-sdk`) pip. Anaconda environment used reticulate package R.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/config_sdk_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure environment for accessing API — config_sdk_env","text":"","code":"config_sdk_env(env_name = \"benchling-reticulate\", env_type = \"virtualenv\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/config_sdk_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure environment for accessing API — config_sdk_env","text":"env_name Name new environment created. default name 'benchling-reticulate'. env_type 'virtualenv' 'conda'. (ex. 'options(BENCHLINGR_RETICULATE_ENV = \"my_env_name\")')","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/config_sdk_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure environment for accessing API — config_sdk_env","text":"","code":"if (FALSE) { config_sdk_env() }"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-get_entity_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get additional information about entities in a warehouse table (single entity column.) — .get_entity_table","title":"Get additional information about entities in a warehouse table (single entity column.) — .get_entity_table","text":"Given data frame retrieved Benchling warehouse, extract additional table warehouse correspond entities  data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-get_entity_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get additional information about entities in a warehouse table (single entity column.) — .get_entity_table","text":"","code":".get_entity_table(conn, df, column, return_cols = c(\"id\", \"name$\"), key = \"id\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-get_entity_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get additional information about entities in a warehouse table (single entity column.) — .get_entity_table","text":"conn Database connection opened `warehouse_connect` df Data frame one entity columns. data frame must also column called `schema`, indicates schema name warehouse table. column Name entity column. return_cols Character vector warehouse column names include results. `return_cols` missing, every column returned. key column data warehouse table used primary key, can `id` `name$`. default option, `id`,  Benchling identifier. `name$` option used table   transformed `replace_entity_id_with_name`.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-get_entity_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get additional information about entities in a warehouse table (single entity column.) — .get_entity_table","text":"data frame rows warehouse table correspond  entities found input data frame (`df`).","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"schema field name can differ schema name , function uses `schema` `schema_field` tables warehouse link  field name one schema actual name entity.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"","code":".map_entity_field_names_to_warehouse_tables(conn, df)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"conn Database connection opened `warehouse_connect` df data.frame one fields entity types.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"vector names warehouse names fields  schema values warehouse names entities  schema","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-map_entity_field_names_to_warehouse_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map entity field names in one warehouse table to corresponding warehouse\ntable with the relevant entities. — .map_entity_field_names_to_warehouse_tables","text":"","code":"conn <- warehouse_connect( \"hemoshear-dev\",  username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),  password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\"))    d <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\")  .map_entity_field_names_to_warehouse_tables(conn, d) #>  analytes  #> \"analyte\""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack the values of a JSON column into new rows — .unpack_long","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"Unpack values JSON column new rows","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"","code":".unpack_long(df, column)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"df Data frame JSON columns unpacked new rows. column Name JSON column unpacked.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack the values of a JSON column into new rows — .unpack_long","text":"Data frame values JSON column unpacked.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack the values of a JSON column into new columns — .unpack_wide","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"Unpack values JSON column new columns","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"","code":".unpack_wide(df, column)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"df Data frame JSON columns unpacked new columns column Name JSON column unpacked.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-unpack_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack the values of a JSON column into new columns — .unpack_wide","text":"Data frame values JSON column unpacked.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-vec2sql_tuple.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"Convert vector valid tuple can used SQL queries.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-vec2sql_tuple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"","code":".vec2sql_tuple(x)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-vec2sql_tuple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"x Character numeric vector","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-vec2sql_tuple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"character vector represents SQL tuple used SQL queries.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/dot-vec2sql_tuple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vector into a valid tuple that can be used\nin SQL queries. — .vec2sql_tuple","text":"","code":"x <- c('A', 'B', 'C') res <- .vec2sql_tuple(x) y <- c(1, 2) res <- .vec2sql_tuple(y)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download file attachments from Benchling — download_blobs","title":"Download file attachments from Benchling — download_blobs","text":"Download \"blobs\" attached Benchling entities results.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download file attachments from Benchling — download_blobs","text":"","code":"download_blobs(client, file_map, outdir, condaenv = \"benchling-reticulate\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download file attachments from Benchling — download_blobs","text":"client Benchling client object created `benchling_api_auth()`. file_map List names blob (file) identifiers values file names. outdir Directory save output files. condaenv Name conda environment use. Defaults  `benchling-reticulate`.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download file attachments from Benchling — download_blobs","text":"","code":"if (FALSE) { conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM  non_barcode_plate_file_results$raw WHERE study_codes::text LIKE  '%bfi_jUgN7fPL%'\") file_col <- purrr::map(as.character(res$excel_file),                       ~ RJSONIO::fromJSON(.) %>% .[[1]]) file_map <- purrr::map_chr(file_col, ~ .['name']) names(file_map) <- purrr::map_chr(file_col, ~ .['id']) file_map <- as.list(file_map) download_blobs(file_map, outdir='data') }"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs_in_warehouse_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"Download blobs contained within warehouse table.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs_in_warehouse_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"","code":"download_blobs_in_warehouse_table(   client,   conn,   df,   columns = NULL,   outdir = \".\" )"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs_in_warehouse_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"client Benchling API client object. conn warehouse connection opened `warehouse_connect`. df Data frame retrieved Benchling data warehouse. Must `schema` column included. columns Character vector column names table download  blobs . outdir Directory files saved local machine. Subdirectories created within directory blob link column data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/download_blobs_in_warehouse_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download blobs contained within a warehouse table. — download_blobs_in_warehouse_table","text":"","code":"if (FALSE) { library(magrittr) client <- benchling_api_auth(\"https://hemoshear.benchling.com\") conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM   non_barcode_plate_file_results$raw WHERE study_codes::text LIKE   '%bfi_jUgN7fPL%'\") download_blobs_in_warehouse_table(conn, res, outdir='temp_data_dir/') }"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/expand_multiselect_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"schema contains multi-select field, column data frame retrieved data warehouse JSON type. function allows one unpack values column, creating either new rows new  columns data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/expand_multiselect_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"","code":"expand_multiselect_column(   conn,   df,   column,   shape = \"long\",   column_prefix = NULL )"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/expand_multiselect_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"conn Database connection opened `warehouse_connect`. used ensure specified `column` actually multi-select field defined schema. df Input data frame retrieved data warehouse. column Name JSON column expanded. shape `shape` argument determines values JSON column unpacked create new rows (`long`) new columns (`wide`). column_prefix `shape` argument `wide`, new columns created data frame. default, new column names start name original column end integer (1, 2, ...,  number maximum values single row JSON field.). One can override behavior passing character vector `column_prefix` argument. Using `column_prefix` argument recommended column entity type, one able use `get_entity_table`  `replace_entity_id_with_name` new columns.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/expand_multiselect_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"Data frame values `column` unpacked.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/expand_multiselect_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack the values in a JSON column from a data frame retrieved from\nthe data warehouse. — expand_multiselect_column","text":"","code":"conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) d <- DBI::dbGetQuery(conn, \"SELECT plate,analytes FROM simple_plate_analyte_mapping$raw  WHERE entry_id$ = 'etr_MWQ7M7Pz'\") res <- expand_multiselect_column(conn, d, column=\"analytes\", shape=\"long\") res <- expand_multiselect_column(conn, d, column=\"analytes\", shape=\"wide\") #> New names: #> • `` -> `...1` #> • `` -> `...2` DBI::dbDisconnect(conn)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/find_entry_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Find unstructured tables (not registry or results) in a notebook entry. — find_entry_tables","title":"Find unstructured tables (not registry or results) in a notebook entry. — find_entry_tables","text":"function returns locations unstructured tables notebook entry. show user registration results tables might  located notebook entry, information tables must retrieved API endpoints / data warehouse tables.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/find_entry_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find unstructured tables (not registry or results) in a notebook entry. — find_entry_tables","text":"","code":"find_entry_tables(json, min_rows = NULL)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/find_entry_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find unstructured tables (not registry or results) in a notebook entry. — find_entry_tables","text":"json JSON response GET /entry/entry_id. *** Link appropriate Benchling API endpoint . min_rows Keep tables number rows .","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/find_entry_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find unstructured tables (not registry or results) in a notebook entry. — find_entry_tables","text":"List names days elements indices `notes` attribute    correspond tables entry.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/find_entry_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find unstructured tables (not registry or results) in a notebook entry. — find_entry_tables","text":"","code":"if (FALSE) { conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) entry <- get_entry(id=\"xxxxxx\", download=FALSE) find_tables(entry) DBI::dbDisconnect(conn) }"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/get_entity_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get additional information about entities in a warehouse table — get_entity_table","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"Given data frame retrieved Benchling warehouse, extract additional tables warehouse correspond entities  data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/get_entity_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"","code":"get_entity_table(conn, df, columns = NULL, return_cols = \"*\", key = \"id\")"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/get_entity_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"conn Database connection opened `warehouse_connect` df Data frame one entity columns. data frame must also column called `schema`, indicates schema name warehouse table. columns Character vector column names expand. NULL, entity columns expanded. see columns data frame correspond entity fields, use `list_entity_columns` tables. return_cols Character vector warehouse columns return entity. default value (`*`) return every column. specifying different  set columns return, recommended one includes `id`  `name$` columns. explicitly included, function  add implicitly. key column data warehouse table used primary key, can `id` `name$`. default option, `id`, Benchling identifier. `name$` option used table  transformed `replace_entity_id_with_name`.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/get_entity_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"List data frames rows warehouse table correspond  entities found input data frame (`df`). element list  corresponds entity column input data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/get_entity_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get additional information about entities in a warehouse table — get_entity_table","text":"","code":"conn <- warehouse_connect(\"hemoshear-dev\",     username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),    password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) df <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\") get_entity_table(conn,  df) #> $analytes #>             id    source_id  schema archived$ archive_purpose$  creator_id$ #> 1 bfi_9fKcrORv src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 2 bfi_KsLU5uWV src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 3 bfi_VVamxrKQ src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #> 4 bfi_Q13AlXkf src_fv7Pvd8R analyte     FALSE             <NA> ent_Ec76qX9f #>           created_at$        modified_at$                  name$ #> 1 2022-09-20 13:07:45 2022-09-20 13:07:45 12C-Methylmalonic Acid #> 2 2022-09-20 13:07:45 2022-09-20 13:07:45          12C-Uric Acid #> 3 2022-09-20 13:07:45 2022-09-20 13:07:45 13C-Methylmalonic Acid #> 4 2022-09-20 13:07:45 2022-09-20 13:07:45          13C-Uric Acid #>   file_registry_id$  schema_id$   folder_id$  project_id$ #> 1              A001 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 2              A002 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 3              A003 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #> 4              A004 ts_VvMdQcMn lib_F5H5Syfw src_ZRvTYOgM #>                                                                                                                              url$ #> 1 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_9fKcrORv-12c-methylmalonic-acid/edit #> 2          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_KsLU5uWV-12c-uric-acid/edit #> 3 https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_VVamxrKQ-13c-methylmalonic-acid/edit #> 4          https://hemoshear-dev.benchling.com/hemoshear_therapeutics_org/f/lib_HG4kUobQ-registry/bfi_Q13AlXkf-13c-uric-acid/edit #>   validation_status$         type$ is_registered$ precursor_ion_mz #> 1             PASSED custom_entity           TRUE            117.0 #> 2             PASSED custom_entity           TRUE            166.9 #> 3             PASSED custom_entity           TRUE            121.3 #> 4             PASSED custom_entity           TRUE            171.0 #>   product_ion_mz #> 1           73.1 #> 2          123.9 #> 3           76.4 #> 4          126.0 #>"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/is_schema_in_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"`schema` column appears every data warehouse table. function stops function execution `schema` data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/is_schema_in_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"","code":"is_schema_in_dataframe(df)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/is_schema_in_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"df data.frame table data warehouse.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/is_schema_in_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise exception if the `schema` column is not in the data frame. — is_schema_in_dataframe","text":"Used side effect .","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_entity_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"List names indices entity columns data frame corresponding warehouse table.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_entity_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"","code":"list_entity_columns(conn, df)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_entity_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"conn Database connection opened `warehouse_connect` df Data frame entity columns","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_entity_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"Vector names names entity columns data frame values corresponding indices.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_entity_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the names and indices of entity columns in a data frame corresponding\nto a warehouse table. — list_entity_columns","text":"","code":"conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\") list_entity_columns(conn, res) #> analytes  #>       17  DBI::dbDisconnect(conn)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_multiselect_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"List multi-select columns data frame retrieved data  warehouse","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_multiselect_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"","code":"list_multiselect_columns(conn, df)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_multiselect_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"conn Database connection opened `warehouse_connect`. df Data frame retrieved data warehouse.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_multiselect_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"Character vector names names multi-select columns data frame values positions multi-select columns data frame.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/list_multiselect_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the multi-select columns in a data frame retrieved from the data \nwarehouse — list_multiselect_columns","text":"","code":"conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) res <- DBI::dbGetQuery(conn, \"SELECT * FROM simple_plate_analyte_mapping$raw\") list_multiselect_columns(conn, res) #> analytes  #>       17"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read unstructured table in a notebook entry — read_entry_table","title":"Read unstructured table in a notebook entry — read_entry_table","text":"Read unstructured table notebook entry","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read unstructured table in a notebook entry — read_entry_table","text":"","code":"read_entry_table(entry, day, table_index, table_name = TRUE)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read unstructured table in a notebook entry — read_entry_table","text":"entry Notebook entry JSON format. day Integer day notebook entry. See `find_entry_tables`. table_index Integer position table notebook entry list.  See `find_entry_tables`. table_name bool Determines name table notebook entry included output. `TRUE` selected, table name added new column data frame. `FALSE`, table name ignored.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read unstructured table in a notebook entry — read_entry_table","text":"Data frame representing unstructured table notebook entry.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read unstructured table in a notebook entry — read_entry_table","text":"","code":"client <- benchling_api_auth(tenant=\"https://hemoshear-dev.benchling.com\",                              api_key=Sys.getenv(\"BENCHLING_DEV_API_KEY\")) entry <- client$entries$get_entry_by_id(\"etr_T3WZTyAe\") table_indices <- benchlingr:::find_entry_tables(entry) print(table_indices) #> [[1]] #> [1] 2 #>  #> [[2]] #> integer(0) #>  a_table <- read_entry_table(entry, day=1, table_index=2)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all unstructured tables in a notebook entry. — read_entry_tables","title":"Read all unstructured tables in a notebook entry. — read_entry_tables","text":"function read unstructured tables notebook entry, returning list data frames.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all unstructured tables in a notebook entry. — read_entry_tables","text":"","code":"read_entry_tables(entry, table_name = TRUE, verbose = FALSE)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all unstructured tables in a notebook entry. — read_entry_tables","text":"entry Notebook entry JSON format. See `get_entry`. table_name table_name TRUE, names tables notebook entry returned names output list. verbose verbose, function alert user tables can found days notebook.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read all unstructured tables in a notebook entry. — read_entry_tables","text":"List data frames representing unstructured tables notebook entry.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_entry_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read all unstructured tables in a notebook entry. — read_entry_tables","text":"","code":"if (FALSE) { client <- benchling_api_auth(tenant=\"https://hemoshear.benchling.com\") client$entries$get_entry_by_id entry <- get_entry(id = \"etr\") tables <- read_tables(entry) }"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_plate_diagrams.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and parse plate diagrams in a notebook entry — read_plate_diagrams","title":"Find and parse plate diagrams in a notebook entry — read_plate_diagrams","text":"Benchling users can add special unstructured tables notebook entrys called \"plate diagrams\" conveying information contents physical plates. `read_plate_layouts` function extract  plate diagrams data frames processing R.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_plate_diagrams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and parse plate diagrams in a notebook entry — read_plate_diagrams","text":"","code":"read_plate_diagrams(entry, plate_dim = NULL)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_plate_diagrams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and parse plate diagrams in a notebook entry — read_plate_diagrams","text":"entry response GET /entry/entry_id plate_dim numeric vector length 2 describes dimensions plates extracted notebook entry. example, `c(32, 48)` return 384-well plates. plate sizes must `c(2,3)`, `c(3,4)`, `c(4,6)`, `c(6,8)`, `c(8, 12)`, `c(16, 24)`,  `c(32, 48)`. default, `plate_dim` `NULL` function return plates sizes supported Benchling.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_plate_diagrams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and parse plate diagrams in a notebook entry — read_plate_diagrams","text":"List data frames representing plate diagrams present notebook entry.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/read_plate_diagrams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and parse plate diagrams in a notebook entry — read_plate_diagrams","text":"","code":"client <- benchling_api_auth(tenant=\"https://hemoshear-dev.benchling.com\",                             api_key=Sys.getenv(\"BENCHLING_DEV_API_KEY\")) entry <- client$entries$get_entry_by_id(\"etr_f1bpDIes\") plate_diagrams <- read_plate_diagrams(entry)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/replace_entity_id_with_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"Values entity column appear Benchling identifiers pulled data warehouse. function converts identifiers  human-readable names. example, custom entity value identifier looks like \"bfi_10dgdgFJx\", name might \"cell line\".","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/replace_entity_id_with_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"","code":"replace_entity_id_with_name(conn, df)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/replace_entity_id_with_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"conn Database connection opened `warehouse_connect`. df Data frame entity columns.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/replace_entity_id_with_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"data.frame Benchling entity identifiers replaced  names entities.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/replace_entity_id_with_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace identifiers in entity columns with the entity names. — replace_entity_id_with_name","text":"","code":"conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\"))  df <- DBI::dbGetQuery(conn, \"SELECT * FROM  simple_plate_analyte_mapping_with_two_analytes$raw WHERE  entry_id$ = 'etr_lnZDpRVI'\") res <- replace_entity_id_with_name(conn, df) DBI::dbDisconnect(conn)"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/warehouse_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a Benchling data warehouse — warehouse_connect","title":"Connect to a Benchling data warehouse — warehouse_connect","text":"Open connection data warehouse particular Benchling tenant using `DBI` `RPostgres` packages.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/warehouse_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a Benchling data warehouse — warehouse_connect","text":"","code":"warehouse_connect(   tenant,   username = Sys.getenv(\"BENCHLING_WAREHOUSE_USERNAME\"),   password = Sys.getenv(\"BENCHLING_WAREHOUSE_PASSWORD\") )"},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/warehouse_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a Benchling data warehouse — warehouse_connect","text":"tenant Name Benchling tenant warehouse connection opened (character). username Username Benchling tenant (character). default argument 'BENCHLING_WAREHOUSE_USERNAME' environment variable `.Renviron` file. password Password Benchling tenant (character). default argument 'BENCHLING_WAREHOUSE_PASSWORD' environment variable  `.Renviron` file.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/warehouse_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a Benchling data warehouse — warehouse_connect","text":"'database_connection***' object can used `DBI` package make queries Postgres database specified tenant.","code":""},{"path":"https://upgraded-succotash-8df2b926.pages.github.io/reference/warehouse_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a Benchling data warehouse — warehouse_connect","text":"","code":"if (FALSE) { conn <- warehouse_connect(\"hemoshear-dev\",      username = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_USERNAME\"),     password = Sys.getenv(\"BENCHLING_DEV_WAREHOUSE_PASSWORD\")) # It is good practice to close the connection after finishing your queries.  DBI::dbDisconnect(conn) }"}]
