% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_entity_table.R
\name{get_entity_table}
\alias{get_entity_table}
\title{Get additional information about entities in a warehouse table}
\usage{
get_entity_table(conn, df, columns = NULL, return_cols = "*", key = "id")
}
\arguments{
\item{conn}{Database connection opened with `warehouse_connect`}

\item{df}{Data frame with one or more entity columns. The data frame
must also have a column called `schema`, which indicates the schema
name of the warehouse table.}

\item{columns}{Character vector of column names to expand. If NULL, then all entity columns
will be expanded. To see which columns in the data frame correspond to
entity fields, use the `list_entity_columns` tables.}

\item{return_cols}{Character vector of warehouse columns to return for the entity.
The default value (`*`) will return every column. When specifying a different 
set of columns to return, it is recommended that one includes the `id` 
and `name$` columns. If they are not explicitly included, the function 
will add them implicitly.}

\item{key}{The column in the data warehouse table that should be used
for the primary key, which can be `id` or `name$`. The default option, `id`,
is the Benchling identifier. The `name$` option should be used if the table 
has been transformed by `replace_entity_id_with_name`.}
}
\value{
List of data frames with rows from warehouse table that correspond to 
entities found in the input data frame (`df`). Each element in the list 
corresponds to an entity column in the input data frame.
}
\description{
Given a data frame retrieved from the Benchling warehouse, extract the
additional tables in the warehouse that correspond to the entities in the 
data frame.
}
\examples{
\dontrun{
conn <- warehouse_connect("hemoshear-dev", 
   username = Sys.getenv("BENCHLING_DEV_WAREHOUSE_USERNAME"),
   password = Sys.getenv("BENCHLING_DEV_WAREHOUSE_PASSWORD"))
df <- DBI::dbGetQuery(conn, "SELECT * FROM simple_plate_analyte_mapping$raw")
get_entity_table(conn,  df)
}

}
